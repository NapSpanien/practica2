
linea 1, palabra reservada: libreria 
linea 1, identificador: misc
linea 1, delimitador: ;
linea 3, palabra reservada: importar 
linea 3, palabra reservada: libreria 
linea 3, identificador: principal
nombre -> IDENTIFICADOR
linea 3, operador: ::
linea 3, identificador: sistema_operativo
nombre -> nombre :: IDENTIFICADOR
linea 3, operador: ::
linea 3, identificador: entrada_salida
nombre -> nombre :: IDENTIFICADOR 
linea 3, palabra reservada: como 
linea 3, identificador: E_S
linea 3, delimitador: ;
libreria -> IMPORTAR LIBRERIA nombre COMO IDENTIFICADOR
linea 5, identificador: variable 
linea 5, delimitador: : 
linea 5, palabra reservada: entero
tipoBasico -> ENTERO 
linea 5, palabra reservada: corto
longitud -> CORTO
linea 5, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
declaracion -> declaracionObjeto
linea 7, identificador: PI 
linea 7, delimitador: : 
linea 7, palabra reservada: constante 
linea 7, palabra reservada: real
tipoBasico -> REAL 
linea 7, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 7, ctc real: 3.141592
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 7, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : CONSTANTE especificacionTipo ASIGNACION expresion ;

declaracion -> declaracionObjeto
declaracionMultiple -> declaracion declaracion  
linea 9, palabra reservada: subprograma 
linea 9, identificador: areaRectangulo 
linea 9, delimitador: (
linea 9, identificador: Base
linea 9, delimitador: :
linea 9, palabra reservada: real
tipoBasico -> REAL 
linea 9, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 9, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 9, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion 
linea 9, identificador: altura
linea 9, delimitador: :
linea 9, palabra reservada: Real
tipoBasico -> REAL 
linea 9, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 9, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 9, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion
declaracionParametrosMultiple -> declaracionParametros ';' declaracionParametros  
parametrizacion -> '(' declaracionParametrosMultiple ')' 
linea 9, palabra reservada: devolver 
linea 9, palabra reservada: real
tipoBasico -> REAL  
linea 10, palabra reservada: principio
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR parametrizacion tipoResultado    
linea 11, palabra reservada: devolver 
linea 11, identificador: Base
nombre -> IDENTIFICADOR
linea 11, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 11, identificador: altura
nombre -> IDENTIFICADOR
linea 11, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver  
linea 12, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 12, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 14, palabra reservada: subprograma 
linea 14, identificador: altaUsuario 
linea 14, delimitador: ( 
linea 14, identificador: nombre
linea 14, delimitador: ,
linea 14, identificador: direccion
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 14, delimitador: :
linea 14, palabra reservada: lista 
linea 14, palabra reservada: de 
linea 14, palabra reservada: caracter
tipoBasico -> CARACTER
linea 14, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> identificadorMultiple ':' especificacionTipo 
linea 14, identificador: edad
linea 14, delimitador: :
linea 14, palabra reservada: entero
tipoBasico -> ENTERO
linea 14, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo
declaracionParametrosMultiple -> declaracionParametros ';' declaracionParametros   
linea 14, identificador: peso
linea 14, delimitador: ,
linea 14, identificador: altura
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 14, delimitador: :
linea 14, palabra reservada: real
tipoBasico -> REAL
linea 14, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> identificadorMultiple ':' especificacionTipo
declaracionParametrosMultiple -> declaracionParametrosMultiple declaracionParametros  
parametrizacion -> '(' declaracionParametrosMultiple ')'  
linea 15, palabra reservada: principio
cabeceraSubprograma -> IDENTIFICADOR parametrizacion    
linea 16, delimitador: ;
instruccion -> ';'      
linea 18, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 18, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 20, palabra reservada: tipo 
linea 20, identificador: persona 
linea 20, palabra reservada: es 
linea 20, palabra reservada: registro  
linea 21, identificador: nombre 
linea 21, delimitador: : 
linea 21, palabra reservada: lista 
linea 21, palabra reservada: de 
linea 21, palabra reservada: caracter
tipoBasico -> CARACTER
linea 21, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'  
linea 22, identificador: edad 
linea 22, delimitador: : 
linea 22, palabra reservada: entero
tipoBasico -> ENTERO
linea 22, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campo campo  
linea 23, identificador: casada 
linea 23, delimitador: : 
linea 23, palabra reservada: booleano
tipoBasico -> BOOLEANO 
linea 23, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 23, palabra reservada: Falso
literal -> FASLO
primario -> literal
expresionUnaria -> primario
linea 23, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion ';'
campoMultiple -> campoMultiple campo
linea 24, palabra reservada: fin 
linea 24, palabra reservada: registro
tipoRegistro -> REGISTRO campoMultiple FIN REGISTRO
tipoEstructurado -> tipoRegistro
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 26, palabra reservada: tipo 
linea 26, identificador: esfera 
linea 26, palabra reservada: es 
linea 26, palabra reservada: clase 
linea 26, delimitador: (
linea 26, identificador: forma
nombre -> IDENTIFICADOR
linea 26, delimitador: )
superClase -> ( nombre )  
linea 27, palabra reservada: privado
visibilidad -> PRIVADO 
linea 27, identificador: radio 
linea 27, delimitador: : 
linea 27, palabra reservada: real
tipoBasico -> REAL 
linea 27, palabra reservada: largo
longitud -> LARGO
linea 27, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
componente -> declaracionObjeto
declaracionComponente -> visibilidad  componente  
linea 28, palabra reservada: constructor
modificador -> CONSTRUCTOR 
linea 28, palabra reservada: subprograma 
linea 28, identificador: esfera 
linea 28, delimitador: (
linea 28, identificador: radio 
linea 28, delimitador: : 
linea 28, palabra reservada: real
tipoBasico -> REAL
linea 28, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo
parametrizacion -> '(' declaracionParametros ')' 
linea 28, palabra reservada: devolver 
linea 28, identificador: esfera
nombre -> IDENTIFICADOR    
linea 29, palabra reservada: principio
especificacionTipo -> nombre
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR parametrizacion tipoResultado      
linea 30, identificador: esfera
linea 30, operador: ::
nombre -> IDENTIFICADOR
linea 30, identificador: radio
nombre -> nombre :: IDENTIFICADOR 
linea 30, operador: :=
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 30, identificador: radio
nombre -> IDENTIFICADOR
linea 30, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion    
linea 31, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 31, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
componente -> modificador declaracionSubprograma
declaracionComponente ->   componente
declaracionComponenteMultiple -> declaracionComponente  declaracionComponente  
linea 32, palabra reservada: publico
visibilidad -> PUBLICO 
linea 32, palabra reservada: subprograma 
linea 32, identificador: volumen 
linea 32, palabra reservada: devolver 
linea 32, palabra reservada: real
tipoBasico -> REAL    
linea 33, palabra reservada: principio
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR tipoResultado      
linea 34, palabra reservada: devolver 
linea 34, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, operador: /
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 34, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, operador: *
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion / expresion
linea 34, identificador: PI
nombre -> IDENTIFICADOR
linea 34, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion * expresion
linea 34, identificador: esfera
nombre -> IDENTIFICADOR
linea 34, operador: ::
linea 34, identificador: radio
nombre -> nombre :: IDENTIFICADOR
linea 34, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
linea 34, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver    
linea 35, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 35, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
componente -> declaracionSubprograma
declaracionComponente -> visibilidad  componente
declaracionComponenteMultiple -> declaracionComponenteMultiple  declaracionComponente  
linea 36, palabra reservada: fin 
linea 36, palabra reservada: clase
clase -> CLASE superclase declaracionComponenteMultiple FIN CLASE
tipoEstructurado -> clase
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 38, palabra reservada: tipo 
linea 38, identificador: color 
linea 38, palabra reservada: es 
linea 38, palabra reservada: enumeracion 
linea 38, palabra reservada: de 
linea 38, palabra reservada: entero
tipoBasico -> ENTERO  
linea 39, identificador: Rojo
tipoEscalar -> tipoBasico 
linea 39, operador: := 
linea 39, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 39, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion  
linea 40, identificador: Verde 
linea 40, operador: := 
linea 40, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 40, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion
elementoEnumeracionMultiple -> elementoEnumeracion ',' elementoEnumeracion  
linea 41, identificador: Azul 
linea 41, operador: := 
linea 41, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 42, palabra reservada: fin
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion
elementoEnumeracionMultiple -> elementoEnumeracionMultiple ',' elementoEnumeracion 
linea 42, palabra reservada: enumeracion
tipoEnumerado -> ENUMERACION DE tipoEscalar elementoEnumeracionMultiple FIN ENUMERACION
tipoEstructurado -> tipoEnumerado
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 44, palabra reservada: subprograma 
linea 44, identificador: Radio_Circunferencia 
linea 44, palabra reservada: devolver 
linea 44, palabra reservada: real
tipoBasico -> REAL    
linea 47, identificador: PI
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR tipoResultado
linea 47, delimitador: : 
linea 47, palabra reservada: constante 
linea 47, palabra reservada: real
tipoBasico -> REAL 
linea 47, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 47, ctc real: .3141592^1
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 47, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : CONSTANTE especificacionTipo ASIGNACION expresion ;

declaracion -> declaracionObjeto    
linea 50, identificador: area
linea 50, delimitador: , 
linea 50, identificador: radio
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 50, delimitador: : 
linea 50, palabra reservada: real
tipoBasico -> REAL
linea 50, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> identificadorMultiple : especificacionTipo ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracion declaracion  
linea 51, identificador: otra_cosa 
linea 51, delimitador: : 
linea 51, palabra reservada: real
tipoBasico -> REAL 
linea 51, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 51, ctc real: %x1F.34^-Faa
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 51, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion   
linea 53, palabra reservada: principio  
linea 55, identificador: E_S
linea 55, operador: ::
nombre -> IDENTIFICADOR
linea 55, identificador: escribir_consola
nombre -> nombre :: IDENTIFICADOR
linea 55, delimitador: (
linea 55, cadena: " %nRadio de la #{circunferencia#}%
	                        %o151%O144%X69%O157%x74%O141: " 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 56, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 56, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada  
linea 57, identificador: E_S
linea 57, operador: ::
nombre -> IDENTIFICADOR
linea 57, identificador: leer_consola
nombre -> nombre :: IDENTIFICADOR
linea 57, delimitador: (
linea 57, identificador: radio
linea 57, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 57, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccion instruccion     
linea 60, identificador: area 
linea 60, operador: :=
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 60, identificador: PI
nombre -> IDENTIFICADOR 
linea 60, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 60, identificador: radio
nombre -> IDENTIFICADOR 
linea 60, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria 
linea 60, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 60, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion
instruccionMultiple -> instruccionMultiple instruccion    
linea 64, identificador: escribir_consola
linea 64, delimitador: (
nombre -> IDENTIFICADOR
linea 64, cadena: " %nArea de la %
	                     %"circunferencia %": #f" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 65, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion 
linea 65, identificador: area
linea 65, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametro ',' definicionParametro
llamadaSubprograma -> nombre '(' definicionParametroMultiple ')'
linea 65, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccionMultiple instruccion 
linea 65, identificador: escribir_consola
linea 65, delimitador: (
nombre -> IDENTIFICADOR
linea 65, cadena: " %n" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 65, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 65, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccionMultiple instruccion  
linea 67, palabra reservada: DeVoLVeR 
linea 67, identificador: area
nombre -> IDENTIFICADOR
linea 67, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver
instruccionMultiple -> instruccionMultiple instruccion
linea 68, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO declaracionMultiple instruccionMultiple FIN 
linea 68, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 70, palabra reservada: tipo 
linea 70, identificador: entero_corto_sin_signo 
linea 70, palabra reservada: es 
linea 70, palabra reservada: entero
tipoBasico -> ENTERO 
linea 70, palabra reservada: corto
longitud -> CORTO
linea 70, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 71, palabra reservada: tipo 
linea 71, identificador: enteros_8bits 
linea 71, palabra reservada: es 
linea 71, palabra reservada: signo 
linea 71, palabra reservada: entero
tipoBasico -> ENTERO 
linea 71, palabra reservada: corto
longitud -> CORTO 
linea 71, palabra reservada: rango 
linea 71, operador: -
linea 71, ctc entera: 255
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> '-' primario 
linea 71, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 71, ctc entera: 255
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 71, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
rango -> expresion :: expresion
tipoEscalar -> SIGNO tipoBasico longitud RANGO rango
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 72, palabra reservada: tipo 
linea 72, identificador: reales_10000 
linea 72, palabra reservada: es 
linea 72, palabra reservada: real
tipoBasico -> REAL 
linea 72, palabra reservada: largo
longitud -> LARGO 
linea 72, palabra reservada: rango 
linea 72, ctc entera: 0
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 72, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 72, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 72, operador: ^
expresionPosfija -> expresionUnaria
linea 72, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 72, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
rango -> expresion :: expresion
tipoEscalar -> tipoBasico longitud RANGO rango
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 74, identificador: valores 
linea 74, delimitador: : 
linea 74, palabra reservada: lista 
linea 74, palabra reservada: de 
linea 74, identificador: entero_corto_sin_signo
nombre -> IDENTIFICADOR 
linea 74, operador: :=
especificacionTipo -> nombre
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 74, operador: [ 
linea 74, ctc entera: 88
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 74, ctc entera: 56
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion 
linea 74, ctc entera: 100
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion 
linea 74, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion 
linea 74, ctc entera: 25
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 74, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 74, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 75, identificador: valores2 
linea 75, delimitador: : 
linea 75, palabra reservada: lista 
linea 75, palabra reservada: de 
linea 75, palabra reservada: lista 
linea 75, palabra reservada: de 
linea 75, palabra reservada: entero
tipoBasico -> ENTERO 
linea 75, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 75, operador: [
linea 75, operador: [
linea 75, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 75, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
linea 75, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 75, operador: [
linea 75, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 75, ctc entera: 5
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 77, palabra reservada: tipo 
linea 77, identificador: nombre_etiqueta 
linea 77, palabra reservada: es 
linea 77, palabra reservada: registro   
linea 78, identificador: campo1 
linea 78, delimitador: : 
linea 78, palabra reservada: entero
tipoBasico -> ENTERO
linea 78, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'   
linea 79, identificador: campo2 
linea 79, delimitador: : 
linea 79, palabra reservada: real
tipoBasico -> REAL
linea 79, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campo campo   
linea 80, identificador: la_persona 
linea 80, delimitador: : 
linea 80, identificador: persona
nombre -> IDENTIFICADOR
linea 80, delimitador: ;
especificacionTipo -> nombre
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campoMultiple campo  
linea 81, palabra reservada: fin 
linea 81, palabra reservada: registro
tipoRegistro -> REGISTRO campoMultiple FIN REGISTRO
tipoEstructurado -> tipoRegistro
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 83, identificador: pepito 
linea 83, delimitador: : 
linea 83, identificador: persona
nombre -> IDENTIFICADOR 
linea 83, operador: :=
especificacionTipo -> nombre 
linea 83, operador: { 
linea 83, identificador: nombre 
linea 83, delimitador: => 
linea 83, cadena: "Pepe Perez" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 83, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion 
linea 83, identificador: edad 
linea 83, delimitador: => 
linea 83, ctc entera: 33
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 83, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion
campoValorMult -> campo_valor , campo_valor 
linea 83, identificador: casada 
linea 83, delimitador: => 
linea 83, palabra reservada: Verdadero
literal -> VERDADERO
primario -> literal
expresionUnaria -> primario 
linea 83, operador: }
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion
campoValorMult -> campoValorMult , campo_valor
enumeraciones -> [ campoValorMultiple ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 83, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 85, identificador: coches 
linea 85, delimitador: : 
linea 85, palabra reservada: diccionario 
linea 85, palabra reservada: de 
linea 85, identificador: color
nombre -> IDENTIFICADOR 
linea 85, operador: :=
especificacionTipo -> nombre
tipoDiccionario -> DICCIONARIO DE especificacionTipo
tipoNoEstructurado -> tipoDiccionario
especificacionTipo -> tipoNoEstructurado 
linea 85, operador: { 
linea 85, cadena: "golf"  
linea 85, delimitador: => 
linea 85, identificador: Rojo
nombre -> IDENTIFICADOR
linea 85, delimitador: ,
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion 
linea 85, cadena: "xantia"  
linea 85, delimitador: => 
linea 85, identificador: Verde
nombre -> IDENTIFICADOR
linea 85, delimitador: ,
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion
claveValorMult -> claveValor , claveValor 
linea 85, cadena: "corsa"  
linea 85, delimitador: => 
linea 85, identificador: Azul
nombre -> IDENTIFICADOR 
linea 85, operador: }
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion
claveValorMult -> claveValorMult , claveValor
enumeraciones -> [ claveValorMultiple ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 85, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 87, identificador: nuevos_valores 
linea 87, delimitador: : 
linea 87, palabra reservada: lista 
linea 87, palabra reservada: de 
linea 87, palabra reservada: entero
tipoBasico -> ENTERO 
linea 87, palabra reservada: corto
longitud -> CORTO 
linea 87, operador: :=
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 87, operador: [ 
linea 87, palabra reservada: si 
linea 87, identificador: elemento
nombre -> IDENTIFICADOR 
linea 87, operador: <
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 87, ctc entera: 80
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 87, palabra reservada: entonces
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion < expresion 
linea 87, identificador: elemento
nombre -> IDENTIFICADOR
linea 87, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
linea 87, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 87, palabra reservada: para
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresionCondicional -> pene duro [ si expresion entonces expresion 
linea 87, identificador: elemento 
linea 87, delimitador: : 
linea 87, palabra reservada: entero
tipoBasico -> ENTERO 
linea 87, palabra reservada: en
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 87, identificador: valores
nombre -> IDENTIFICADOR 
linea 87, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clausulaIteracion -> PARA IDENTIFICADOR EN ':' especifiacionTipo EN expresion
enumeraciones ->  expresionCondicional ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 87, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 89, palabra reservada: subprograma 
linea 89, identificador: escribir_lista 
linea 89, delimitador: (
linea 89, identificador: valores 
linea 89, delimitador: : 
linea 89, palabra reservada: lista 
linea 89, palabra reservada: de 
linea 89, palabra reservada: entero
tipoBasico -> ENTERO
linea 89, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo
parametrizacion -> '(' declaracionParametros ')'  
linea 90, identificador: indice
cabeceraSubprograma -> IDENTIFICADOR parametrizacion 
linea 90, delimitador: : 
linea 90, palabra reservada: entero
tipoBasico -> ENTERO 
linea 90, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 90, ctc entera: 0
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 90, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
linea 91, palabra reservada: principio  
linea 92, palabra reservada: prueba    
linea 93, palabra reservada: mientras 
linea 93, identificador: indice
nombre -> IDENTIFICADOR 
linea 93, operador: <
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 93, identificador: longitud
nombre -> IDENTIFICADOR
linea 93, delimitador: (
linea 93, identificador: valores
linea 93, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
primario -> llamada_subprograma
expresionUnaria -> primario      
linea 94, identificador: E_S
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion < expresion
clausulaIteracion -> MIENTRAS expresion
linea 94, operador: ::
nombre -> IDENTIFICADOR
linea 94, identificador: escribir_consola
nombre -> nombre :: IDENTIFICADOR
linea 94, delimitador: (
linea 94, identificador: valores
linea 94, operador: [
nombre -> IDENTIFICADOR
objeto -> nombre
linea 94, identificador: indice
nombre -> IDENTIFICADOR
linea 94, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ]
linea 94, delimitador: )
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 94, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada      
linea 95, identificador: indice 
linea 95, operador: :+
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIG_SUMA :+ 
linea 95, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 95, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion
instruccionMultiple -> instruccion instruccion      
linea 96, palabra reservada: fin 
linea 96, palabra reservada: bucle
instruccionBucle -> clausulaIteracion instruccionMultiple FIN BUCLE
instruccion -> instruccionBucle    
linea 97, palabra reservada: excepcion 
linea 97, delimitador: (
linea 97, identificador: longitud_excedida
nombre -> IDENTIFICADOR
linea 97, delimitador: )      
linea 98, identificador: E_S
linea 98, operador: ::
nombre -> IDENTIFICADOR
linea 98, identificador: escribir_consola
nombre -> nombre :: IDENTIFICADOR
linea 98, delimitador: (
linea 98, cadena: "Lista vacia %n" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 98, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 98, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada    
linea 99, palabra reservada: excepcion
clausulaExcepcionEspecifica -> EXCEPCION ( nombre ) intruccion      
linea 100, identificador: E_S
linea 100, operador: ::
nombre -> IDENTIFICADOR
linea 100, identificador: escribir_consola
nombre -> nombre :: IDENTIFICADOR
linea 100, delimitador: (
linea 100, cadena: "Excepcion indefinida %n" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 100, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 100, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada  
linea 101, palabra reservada: fin
clausulaExcepcionGeneral -> EXCEPCION instruccion
clausulasExcepcion -> clausulaExcepcionEspecifica clausulaExcepcionGeneral
clausulas -> clausulasExcepcion 
linea 101, palabra reservada: prueba
instrccuionCapturaDeExcepcion -> PRUEBA instruccion clausulas FIN PRUEBA
instruccion -> instruccionDeCapturaDeExcepcion
linea 102, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO declaracion instruccion FIN 
linea 102, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion    
codigoLibreria -> libreria declaracionMultiple
definicionLibreria -> LIBRERIA IDENTIFICADOR ; codigoLibreria
EXITO programa -> definicionLibreria
linea 1, palabra reservada: libreria 
linea 1, identificador: ordenacion
linea 1, delimitador: ;
linea 3, palabra reservada: de 
linea 3, palabra reservada: libreria 
linea 3, identificador: principal
nombre -> IDENTIFICADOR
linea 3, operador: ::
linea 3, identificador: sistema_operativo
nombre -> nombre :: IDENTIFICADOR
linea 3, operador: ::
linea 3, identificador: entrada_salida
nombre -> nombre :: IDENTIFICADOR 
linea 3, palabra reservada: importar 
linea 3, identificador: abrir
linea 3, delimitador: ,
linea 3, identificador: cerrar
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 3, delimitador: ;
libreria -> DE LIBRERIA nombre IMPORTAR identificadorMultiple
linea 5, palabra reservada: exportar 
linea 5, identificador: ordenarQuicksort
nombre -> IDENTIFICADOR
linea 5, delimitador: , 
linea 5, identificador: ordenarQuicksort
nombre -> IDENTIFICADOR
linea 5, operador: ::
linea 5, identificador: quicksort
nombre -> nombre :: IDENTIFICADOR
linea 5, delimitador: ;
nombreMultiple -> nombre , nombre
exportaciones -> EXPORTAR nombreMultiple ;
linea 10, palabra reservada: subprograma 
linea 10, identificador: ordenarQuicksort  
linea 12, identificador: n
cabeceraSubprograma -> IDENTIFICADOR 
linea 12, delimitador: : 
linea 12, palabra reservada: constante 
linea 12, palabra reservada: entero
tipoBasico -> ENTERO 
linea 12, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 12, ctc entera: 20
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 12, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : CONSTANTE especificacionTipo ASIGNACION expresion ;

declaracion -> declaracionObjeto  
linea 13, identificador: datos 
linea 13, delimitador: : 
linea 13, palabra reservada: tabla 
linea 13, delimitador: (
linea 13, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 13, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 13, identificador: n
nombre -> IDENTIFICADOR
linea 13, delimitador: )
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 13, palabra reservada: de 
linea 13, palabra reservada: entero
tipoBasico -> ENTERO
linea 13, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> TABLA '(' expresion '..' expresion ')' DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracion declaracion  
linea 14, identificador: limIzdo 
linea 14, delimitador: : 
linea 14, palabra reservada: entero
tipoBasico -> ENTERO 
linea 14, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 14, ctc entera: 0
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 14, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion  
linea 15, identificador: limDcho 
linea 15, delimitador: : 
linea 15, palabra reservada: entero
tipoBasico -> ENTERO 
linea 15, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 15, identificador: n
nombre -> IDENTIFICADOR
linea 15, operador: -
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 15, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 15, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion - expresion
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion    
linea 18, palabra reservada: subprograma 
linea 18, identificador: quicksort 
linea 18, delimitador: (
linea 18, identificador: datos 
linea 18, delimitador: : 
linea 18, palabra reservada: tabla
linea 18, delimitador: (
linea 18, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 18, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 18, identificador: n
nombre -> IDENTIFICADOR
linea 18, delimitador: )
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 18, palabra reservada: de 
linea 18, palabra reservada: entero
tipoBasico -> ENTERO
linea 18, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> TABLA '(' expresion '..' expresion ')' DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo 
linea 18, identificador: limIzdo
linea 18, delimitador: ,
linea 18, identificador: limDcho
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 18, delimitador: : 
linea 18, palabra reservada: valor
modo -> VALOR 
linea 18, palabra reservada: entero
tipoBasico -> ENTERO
linea 18, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> identificadorMultiple ':' modo especificacionTipo
declaracionParametrosMultiple -> declaracionParametros ';' declaracionParametros  
parametrizacion -> '(' declaracionParametrosMultiple ')'    
linea 19, identificador: izdo
cabeceraSubprograma -> IDENTIFICADOR parametrizacion 
linea 19, delimitador: : 
linea 19, palabra reservada: entero
tipoBasico -> ENTERO 
linea 19, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 19, identificador: limIzdo
nombre -> IDENTIFICADOR
linea 19, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto    
linea 20, identificador: dcho 
linea 20, delimitador: : 
linea 20, palabra reservada: entero
tipoBasico -> ENTERO 
linea 20, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 20, identificador: limDcho
nombre -> IDENTIFICADOR
linea 20, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracion declaracion    
linea 21, identificador: pivote 
linea 21, delimitador: : 
linea 21, palabra reservada: entero
tipoBasico -> ENTERO
linea 21, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion  
linea 23, palabra reservada: principio    
linea 25, identificador: pivote 
linea 25, operador: :=
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 25, identificador: datos
nombre -> IDENTIFICADOR
linea 25, operador: [
objeto -> nombre
linea 25, delimitador: (
linea 25, identificador: izdo
nombre -> IDENTIFICADOR
linea 25, operador: +
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 25, identificador: dcho
nombre -> IDENTIFICADOR
linea 25, delimitador: )
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion '+' expresion
primario -> ( expresion ) 
expresionUnaria -> primario
linea 25, operador: /
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 25, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 25, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion / expresion
objeto -> objeto [ expresion ]
linea 25, delimitador: ;
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion    
linea 27, palabra reservada: mientras 
linea 27, identificador: izdo
nombre -> IDENTIFICADOR
linea 27, operador: <=
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 27, identificador: dcho
nombre -> IDENTIFICADOR      
linea 28, palabra reservada: mientras
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion <= expresion
clausulaIteracion -> MIENTRAS expresion 
linea 28, identificador: datos
nombre -> IDENTIFICADOR
linea 28, operador: [
objeto -> nombre
linea 28, identificador: izdo
nombre -> IDENTIFICADOR
linea 28, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ]
linea 28, operador: <
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 28, identificador: pivote
nombre -> IDENTIFICADOR 
linea 28, operador: /\
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion < expresion 
linea 28, identificador: juan
nombre -> IDENTIFICADOR
linea 28, operador: .
objeto -> nombre
linea 28, identificador: leer
objeto -> objeto . nombre         
linea 29, identificador: izdo
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion AND expresion
clausulaIteracion -> MIENTRAS expresion 
linea 29, operador: :=
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 29, identificador: izdo
nombre -> IDENTIFICADOR
linea 29, operador: +
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 29, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 29, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion '+' expresion
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion      
linea 30, palabra reservada: fin 
linea 30, palabra reservada: bucle
instruccionBucle -> clausulaIteracion instruccion FIN BUCLE
instruccion -> instruccionBucle      
linea 32, palabra reservada: mientras 
linea 32, identificador: pivote
nombre -> IDENTIFICADOR
linea 32, operador: <
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 32, identificador: datos
nombre -> IDENTIFICADOR
linea 32, operador: [
objeto -> nombre
linea 32, identificador: dcho
nombre -> IDENTIFICADOR
linea 32, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ] 
linea 32, operador: /\
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion < expresion 
linea 32, identificador: dcho
nombre -> IDENTIFICADOR 
linea 32, operador: >
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 32, identificador: limIzdo
nombre -> IDENTIFICADOR        
linea 33, identificador: dcho
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion > expresion
expresion -> expresion AND expresion
clausulaIteracion -> MIENTRAS expresion 
linea 33, operador: :=
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 33, identificador: dcho
nombre -> IDENTIFICADOR
linea 33, operador: -
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 33, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 33, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion - expresion
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion      
linea 34, palabra reservada: fin 
linea 34, palabra reservada: bucle
instruccionBucle -> clausulaIteracion instruccion FIN BUCLE
instruccion -> instruccionBucle
instruccionMultiple -> instruccion instruccion      
linea 36, palabra reservada: si 
linea 36, delimitador: (
linea 36, identificador: izdo
nombre -> IDENTIFICADOR
linea 36, operador: <=
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 36, identificador: dcho
nombre -> IDENTIFICADOR
linea 36, delimitador: )
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion <= expresion
primario -> ( expresion ) 
expresionUnaria -> primario 
linea 36, palabra reservada: entonces
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia        
linea 37, identificador: temporal 
linea 37, operador: :=
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 37, identificador: datos
nombre -> IDENTIFICADOR
linea 37, operador: [
objeto -> nombre
linea 37, identificador: izdo
nombre -> IDENTIFICADOR
linea 37, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ]
linea 37, delimitador: ;
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion        
linea 38, identificador: datos
linea 38, operador: [
nombre -> IDENTIFICADOR
objeto -> nombre
linea 38, identificador: izdo
nombre -> IDENTIFICADOR
linea 38, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ] 
linea 38, operador: :=
operadorAsignacion -> ASIGNACION :=  
linea 38, identificador: datos
nombre -> IDENTIFICADOR
linea 38, operador: [
objeto -> nombre
linea 38, identificador: dcho
nombre -> IDENTIFICADOR
linea 38, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ]
linea 38, delimitador: ;
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion
instruccionMultiple -> instruccion instruccion        
linea 39, identificador: datos
linea 39, operador: [
nombre -> IDENTIFICADOR
objeto -> nombre
linea 39, identificador: dcho
nombre -> IDENTIFICADOR
linea 39, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ] 
linea 39, operador: :=
operadorAsignacion -> ASIGNACION :=  
linea 39, identificador: temporal
nombre -> IDENTIFICADOR
linea 39, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion
instruccionMultiple -> instruccionMultiple instruccion        
linea 40, identificador: izdo 
linea 40, operador: :=
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 40, identificador: izdo
nombre -> IDENTIFICADOR
linea 40, operador: +
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 40, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 40, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion '+' expresion
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion
instruccionMultiple -> instruccionMultiple instruccion        
linea 41, identificador: dcho 
linea 41, operador: :=
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 41, identificador: dcho
nombre -> IDENTIFICADOR
linea 41, operador: -
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 41, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 41, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion - expresion
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion
instruccionMultiple -> instruccionMultiple instruccion      
linea 42, palabra reservada: fin 
linea 42, palabra reservada: si
instruccionSi -> SI expresion ENTONCES instruccionMultiple FIN SI
instruccion -> instruccionSi
instruccionMultiple -> instruccionMultiple instruccion    
linea 43, palabra reservada: fin 
linea 43, palabra reservada: bucle
instruccionBucle -> clausulaIteracion instruccionMultiple FIN BUCLE
instruccion -> instruccionBucle
instruccionMultiple -> instruccion instruccion    
linea 45, palabra reservada: si 
linea 45, identificador: izdo
nombre -> IDENTIFICADOR
linea 45, operador: <
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 45, identificador: dcho
nombre -> IDENTIFICADOR 
linea 45, palabra reservada: entonces
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion < expresion      
linea 46, identificador: quicksort
linea 46, delimitador: (
nombre -> IDENTIFICADOR
linea 46, identificador: datos
linea 46, delimitador: ,
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
linea 46, identificador: limIzdo
linea 46, delimitador: ,
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametro ',' definicionParametro
linea 46, identificador: dcho
linea 46, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametroMultiple ',' definicionParametro
llamadaSubprograma -> nombre '(' definicionParametroMultiple ')'
linea 46, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada    
linea 47, palabra reservada: fin 
linea 47, palabra reservada: si
instruccionSi -> SI expresion ENTONCES instruccion FIN SI
instruccion -> instruccionSi
instruccionMultiple -> instruccionMultiple instruccion    
linea 48, palabra reservada: si 
linea 48, identificador: dcho
nombre -> IDENTIFICADOR
linea 48, operador: >
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 48, identificador: izdo
nombre -> IDENTIFICADOR 
linea 48, palabra reservada: entonces
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion > expresion      
linea 49, identificador: quicksort
linea 49, delimitador: (
nombre -> IDENTIFICADOR
linea 49, identificador: datos
linea 49, delimitador: ,
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
linea 49, identificador: izdo
linea 49, delimitador: ,
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametro ',' definicionParametro
linea 49, identificador: limDcho
linea 49, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametroMultiple ',' definicionParametro
llamadaSubprograma -> nombre '(' definicionParametroMultiple ')'
linea 49, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada    
linea 50, palabra reservada: fin 
linea 50, palabra reservada: si
instruccionSi -> SI expresion ENTONCES instruccion FIN SI
instruccion -> instruccionSi
instruccionMultiple -> instruccionMultiple instruccion  
linea 52, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO declaracionMultiple instruccionMultiple FIN 
linea 52, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion  
linea 54, palabra reservada: subprograma 
linea 54, identificador: llenarLista 
linea 54, delimitador: (
linea 54, identificador: datos 
linea 54, delimitador: : 
linea 54, palabra reservada: referencia
modo -> REFERENCIA 
linea 54, palabra reservada: tabla
linea 54, delimitador: (
linea 54, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 54, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 54, identificador: n
nombre -> IDENTIFICADOR
linea 54, delimitador: )
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 54, palabra reservada: de 
linea 54, palabra reservada: entero
tipoBasico -> ENTERO
linea 54, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> TABLA '(' expresion '..' expresion ')' DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' modo especificacionTipo 
linea 54, identificador: n 
linea 54, delimitador: : 
linea 54, palabra reservada: valor
modo -> VALOR 
linea 54, palabra reservada: entero
tipoBasico -> ENTERO
linea 54, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' modo especificacionTipo
declaracionParametrosMultiple -> declaracionParametros ';' declaracionParametros  
parametrizacion -> '(' declaracionParametrosMultiple ')'  
linea 55, palabra reservada: principio
cabeceraSubprograma -> IDENTIFICADOR parametrizacion    
linea 56, palabra reservada: repetir 
linea 56, identificador: i 
linea 56, palabra reservada: en 
linea 56, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 56, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 56, identificador: n
nombre -> IDENTIFICADOR      
linea 57, identificador: datos
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
rango -> expresion :: expresion
clausulaIteracion -> REPETIR IDENTIFICADOR EN RANGO
linea 57, operador: [
nombre -> IDENTIFICADOR
objeto -> nombre
linea 57, identificador: i
nombre -> IDENTIFICADOR
linea 57, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ] 
linea 57, operador: :=
operadorAsignacion -> ASIGNACION :=  
linea 57, identificador: aleatorio
nombre -> IDENTIFICADOR
linea 57, delimitador: (
linea 57, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 57, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
linea 57, ctc entera: 100
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 57, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametro ',' definicionParametro
llamadaSubprograma -> nombre '(' definicionParametroMultiple ')'
primario -> llamada_subprograma
expresionUnaria -> primario
linea 57, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion    
linea 58, palabra reservada: fin 
linea 58, palabra reservada: bucle
instruccionBucle -> clausulaIteracion instruccion FIN BUCLE
instruccion -> instruccionBucle  
linea 59, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 59, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 61, palabra reservada: principio  
linea 63, identificador: llenarLista
linea 63, delimitador: (
nombre -> IDENTIFICADOR
linea 63, identificador: datos
linea 63, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 63, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada  
linea 65, identificador: escribir
linea 65, delimitador: (
nombre -> IDENTIFICADOR
linea 65, cadena: "LISTA INICIAL %n" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 65, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 65, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccion instruccion  
linea 66, palabra reservada: repetir 
linea 66, identificador: i 
linea 66, palabra reservada: en 
linea 66, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 66, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 66, identificador: n
nombre -> IDENTIFICADOR    
linea 67, identificador: escribir
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
rango -> expresion :: expresion
clausulaIteracion -> REPETIR IDENTIFICADOR EN RANGO
linea 67, delimitador: (
nombre -> IDENTIFICADOR
linea 67, cadena: "\d -> \d %n" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 67, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
linea 67, identificador: i
linea 67, delimitador: ,
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametro ',' definicionParametro
linea 67, identificador: datos
linea 67, operador: [
nombre -> IDENTIFICADOR
objeto -> nombre
linea 67, identificador: i
nombre -> IDENTIFICADOR
linea 67, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ]
linea 67, delimitador: )
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametroMultiple ',' definicionParametro
llamadaSubprograma -> nombre '(' definicionParametroMultiple ')'
linea 67, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada  
linea 68, palabra reservada: fin 
linea 68, palabra reservada: bucle
instruccionBucle -> clausulaIteracion instruccion FIN BUCLE
instruccion -> instruccionBucle
instruccionMultiple -> instruccionMultiple instruccion  
linea 70, identificador: quicksort
linea 70, delimitador: (
nombre -> IDENTIFICADOR
linea 70, identificador: datos
linea 70, delimitador: ,
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
linea 70, identificador: limIzdo
linea 70, delimitador: ,
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametro ',' definicionParametro
linea 70, identificador: limDcho
linea 70, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametroMultiple ',' definicionParametro
llamadaSubprograma -> nombre '(' definicionParametroMultiple ')'
linea 70, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccionMultiple instruccion  
linea 72, identificador: escribir
linea 72, delimitador: (
nombre -> IDENTIFICADOR
linea 72, cadena: "LISTA ORDENADA %n" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 72, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 72, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccionMultiple instruccion  
linea 73, palabra reservada: repetir 
linea 73, identificador: i 
linea 73, palabra reservada: en 
linea 73, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 73, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 73, identificador: n
nombre -> IDENTIFICADOR    
linea 74, identificador: escribir
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
rango -> expresion :: expresion
clausulaIteracion -> REPETIR IDENTIFICADOR EN RANGO
linea 74, delimitador: (
nombre -> IDENTIFICADOR
linea 74, cadena: "\d -> \d %n" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
linea 74, identificador: i
linea 74, delimitador: ,
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametro ',' definicionParametro
linea 74, identificador: datos
linea 74, operador: [
nombre -> IDENTIFICADOR
objeto -> nombre
linea 74, identificador: i
nombre -> IDENTIFICADOR
linea 74, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ]
linea 74, delimitador: )
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametroMultiple ',' definicionParametro
llamadaSubprograma -> nombre '(' definicionParametroMultiple ')'
linea 74, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada  
linea 75, palabra reservada: fin 
linea 75, palabra reservada: bucle
instruccionBucle -> clausulaIteracion instruccion FIN BUCLE
instruccion -> instruccionBucle
instruccionMultiple -> instruccionMultiple instruccion
linea 77, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO declaracionMultiple instruccionMultiple FIN 
linea 77, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
linea 83, palabra reservada: subprograma 
linea 83, identificador: ordenarMonticulos  
linea 85, identificador: n
cabeceraSubprograma -> IDENTIFICADOR 
linea 85, delimitador: : 
linea 85, palabra reservada: constante 
linea 85, palabra reservada: entero
tipoBasico -> ENTERO 
linea 85, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 85, ctc entera: 10
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 85, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : CONSTANTE especificacionTipo ASIGNACION expresion ;

declaracion -> declaracionObjeto  
linea 86, identificador: datos 
linea 86, delimitador: : 
linea 86, palabra reservada: tabla
linea 86, delimitador: (
linea 86, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 86, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 86, identificador: n
nombre -> IDENTIFICADOR
linea 86, delimitador: )
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 86, palabra reservada: de 
linea 86, palabra reservada: entero
tipoBasico -> ENTERO
linea 86, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> TABLA '(' expresion '..' expresion ')' DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracion declaracion  
linea 87, identificador: temporal 
linea 87, delimitador: : 
linea 87, palabra reservada: entero
tipoBasico -> ENTERO
linea 87, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion  
linea 89, palabra reservada: subprograma 
linea 89, identificador: meter 
linea 89, delimitador: (
linea 89, identificador: i
linea 89, delimitador: ,
linea 89, identificador: n
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 89, delimitador: : 
linea 89, palabra reservada: referencia
modo -> REFERENCIA 
linea 89, palabra reservada: entero
tipoBasico -> ENTERO
linea 89, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> identificadorMultiple ':' modo especificacionTipo
parametrizacion -> '(' declaracionParametros ')'    
linea 90, identificador: temporal
cabeceraSubprograma -> IDENTIFICADOR parametrizacion
linea 90, delimitador: ,
linea 90, identificador: j
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR 
linea 90, delimitador: : 
linea 90, palabra reservada: entero
tipoBasico -> ENTERO
linea 90, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> identificadorMultiple : especificacionTipo ;
declaracion -> declaracionObjeto    
linea 91, identificador: terminar
linea 91, delimitador: : 
linea 91, palabra reservada: booleano
tipoBasico -> BOOLEANO
linea 91, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracion declaracion  
linea 92, palabra reservada: principio    
linea 93, identificador: temporal 
linea 93, operador: :=
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 93, identificador: datos
nombre -> IDENTIFICADOR
linea 93, operador: [
objeto -> nombre
linea 93, identificador: i
nombre -> IDENTIFICADOR
linea 93, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ]
linea 93, delimitador: ;
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion    
linea 95, palabra reservada: mientras 
linea 95, delimitador: (
linea 95, identificador: j
nombre -> IDENTIFICADOR 
linea 95, operador: <=
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 95, identificador: n
nombre -> IDENTIFICADOR
linea 95, delimitador: )
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion <= expresion
primario -> ( expresion ) 
expresionUnaria -> primario 
linea 95, operador: /\
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 95, operador: ~
linea 95, identificador: terminar
nombre -> IDENTIFICADOR      
linea 97, palabra reservada: si
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> ~ expresion
expresion -> expresion AND expresion
clausulaIteracion -> MIENTRAS expresion 
linea 97, delimitador: (
linea 97, identificador: j
nombre -> IDENTIFICADOR 
linea 97, operador: <
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 97, identificador: n
nombre -> IDENTIFICADOR
linea 97, delimitador: )
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion < expresion
primario -> ( expresion ) 
expresionUnaria -> primario 
linea 97, operador: /\
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 97, delimitador: (
linea 97, identificador: datos
nombre -> IDENTIFICADOR
linea 97, operador: [
objeto -> nombre
linea 97, identificador: j
nombre -> IDENTIFICADOR
linea 97, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ] 
linea 97, operador: <
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 97, identificador: datos
nombre -> IDENTIFICADOR
linea 97, operador: [
objeto -> nombre
linea 97, identificador: j
nombre -> IDENTIFICADOR
linea 97, operador: +
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 97, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 97, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion '+' expresion
objeto -> objeto [ expresion ]
linea 97, delimitador: )
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion < expresion
primario -> ( expresion ) 
expresionUnaria -> primario 
linea 97, palabra reservada: entonces
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion AND expresion        
linea 98, identificador: j 
linea 98, operador: :=
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 98, identificador: j
nombre -> IDENTIFICADOR
linea 98, operador: +
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 98, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 98, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion '+' expresion
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion      
linea 99, palabra reservada: fin 
linea 99, palabra reservada: si
instruccionSi -> SI expresion ENTONCES instruccion FIN SI
instruccion -> instruccionSi      
linea 101, palabra reservada: si 
linea 101, identificador: temporal
nombre -> IDENTIFICADOR 
linea 101, operador: >
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 101, identificador: datos
nombre -> IDENTIFICADOR
linea 101, operador: [
objeto -> nombre
linea 101, identificador: j
nombre -> IDENTIFICADOR
linea 101, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ] 
linea 101, palabra reservada: entonces
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion > expresion        
linea 102, identificador: terminar 
linea 102, operador: :=
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 102, palabra reservada: verdadero
literal -> VERDADERO
primario -> literal
expresionUnaria -> primario
linea 102, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion      
linea 103, palabra reservada: sino         
linea 104, identificador: datos
linea 104, operador: [
nombre -> IDENTIFICADOR
objeto -> nombre
linea 104, identificador: j
nombre -> IDENTIFICADOR
linea 104, operador: /
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 104, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 104, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion / expresion
objeto -> objeto [ expresion ] 
linea 104, operador: :=
operadorAsignacion -> ASIGNACION :=  
linea 104, identificador: datos
nombre -> IDENTIFICADOR
linea 104, operador: [
objeto -> nombre
linea 104, identificador: j
nombre -> IDENTIFICADOR
linea 104, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ]
linea 104, delimitador: ;
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion        
linea 105, identificador: j 
linea 105, operador: :=
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 105, identificador: j
nombre -> IDENTIFICADOR
linea 105, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 105, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 105, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion
instruccionMultiple -> instruccion instruccion      
linea 106, palabra reservada: fin 
linea 106, palabra reservada: si
instruccionSi -> SI expresion ENTONCES instruccion SINO instruccionMultiple FIN SI
instruccion -> instruccionSi
instruccionMultiple -> instruccion instruccion    
linea 108, palabra reservada: fin 
linea 108, palabra reservada: bucle
instruccionBucle -> clausulaIteracion instruccionMultiple FIN BUCLE
instruccion -> instruccionBucle
instruccionMultiple -> instruccion instruccion    
linea 110, identificador: datos
linea 110, operador: [
nombre -> IDENTIFICADOR
objeto -> nombre
linea 110, identificador: j
nombre -> IDENTIFICADOR
linea 110, operador: /
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 110, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 110, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion / expresion
objeto -> objeto [ expresion ] 
linea 110, operador: :=
operadorAsignacion -> ASIGNACION :=  
linea 110, identificador: temporal
nombre -> IDENTIFICADOR
linea 110, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion
instruccionMultiple -> instruccionMultiple instruccion  
linea 112, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO declaracionMultiple instruccionMultiple FIN 
linea 112, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion  
linea 114, palabra reservada: subprograma 
linea 114, identificador: hacerMonticulo  
linea 115, palabra reservada: principio
cabeceraSubprograma -> IDENTIFICADOR    
linea 116, palabra reservada: repetir 
linea 116, identificador: i 
linea 116, palabra reservada: en 
linea 116, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 116, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 116, identificador: n
nombre -> IDENTIFICADOR
linea 116, operador: /
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 116, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 116, palabra reservada: descendente
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion / expresion
rango -> expresion :: expresion
clausulaIteracion -> REPETIR IDENTIFICADOR EN rango DESCENDENTE      
linea 117, identificador: meter
linea 117, delimitador: (
nombre -> IDENTIFICADOR
linea 117, identificador: i
linea 117, delimitador: ,
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
linea 117, identificador: n
linea 117, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametro ',' definicionParametro
llamadaSubprograma -> nombre '(' definicionParametroMultiple ')'
linea 117, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada    
linea 118, palabra reservada: fin 
linea 118, palabra reservada: bucle
instruccionBucle -> clausulaIteracion instruccion FIN BUCLE
instruccion -> instruccionBucle  
linea 119, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 119, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 121, palabra reservada: principio  
linea 123, palabra reservada: repetir 
linea 123, identificador: i 
linea 123, palabra reservada: en 
linea 123, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 123, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 123, identificador: n
nombre -> IDENTIFICADOR    
linea 124, identificador: temporal
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
rango -> expresion :: expresion
clausulaIteracion -> REPETIR IDENTIFICADOR EN RANGO 
linea 124, operador: :=
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 124, identificador: datos
nombre -> IDENTIFICADOR
linea 124, operador: [
objeto -> nombre
linea 124, identificador: i
nombre -> IDENTIFICADOR
linea 124, operador: +
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 124, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 124, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion '+' expresion
objeto -> objeto [ expresion ]
linea 124, delimitador: ;
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion    
linea 125, identificador: datos
linea 125, operador: [
nombre -> IDENTIFICADOR
objeto -> nombre
linea 125, identificador: i
nombre -> IDENTIFICADOR
linea 125, operador: +
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 125, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 125, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion '+' expresion
objeto -> objeto [ expresion ] 
linea 125, operador: :=
operadorAsignacion -> ASIGNACION :=  
linea 125, identificador: datos
nombre -> IDENTIFICADOR
linea 125, operador: [
objeto -> nombre
linea 125, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 125, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ]
linea 125, delimitador: ;
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion
instruccionMultiple -> instruccion instruccion    
linea 126, identificador: datos
linea 126, operador: [
nombre -> IDENTIFICADOR
objeto -> nombre
linea 126, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 126, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ] 
linea 126, operador: :=
operadorAsignacion -> ASIGNACION :=  
linea 126, identificador: temporal
nombre -> IDENTIFICADOR
linea 126, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion
instruccionMultiple -> instruccionMultiple instruccion    
linea 128, identificador: meter
linea 128, delimitador: (
nombre -> IDENTIFICADOR
linea 128, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 128, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
linea 128, identificador: i
linea 128, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametro ',' definicionParametro
llamadaSubprograma -> nombre '(' definicionParametroMultiple ')'
linea 128, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccionMultiple instruccion  
linea 129, palabra reservada: fin 
linea 129, palabra reservada: bucle
instruccionBucle -> clausulaIteracion instruccionMultiple FIN BUCLE
instruccion -> instruccionBucle  
linea 131, palabra reservada: repetir 
linea 131, identificador: i 
linea 131, palabra reservada: en 
linea 131, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 131, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 131, identificador: n
nombre -> IDENTIFICADOR    
linea 132, identificador: escribir
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
rango -> expresion :: expresion
clausulaIteracion -> REPETIR IDENTIFICADOR EN RANGO
linea 132, delimitador: (
nombre -> IDENTIFICADOR
linea 132, identificador: datos
linea 132, operador: [
nombre -> IDENTIFICADOR
objeto -> nombre
linea 132, identificador: i
nombre -> IDENTIFICADOR
linea 132, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ]
linea 132, delimitador: )
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 132, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada  
linea 133, palabra reservada: fin 
linea 133, palabra reservada: bucle
instruccionBucle -> clausulaIteracion instruccion FIN BUCLE
instruccion -> instruccionBucle
instruccionMultiple -> instruccion instruccion
linea 135, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO declaracionMultiple instruccionMultiple FIN 
linea 135, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracion declaracion
codigoLibreria -> libreria exportaciones declaracionMultiple
definicionLibreria -> LIBRERIA IDENTIFICADOR ; codigoLibreria
EXITO programa -> definicionLibreria
linea 1, palabra reservada: libreria 
linea 1, identificador: misc
linea 1, delimitador: ;
linea 3, palabra reservada: importar 
linea 3, palabra reservada: libreria 
linea 3, identificador: principal
nombre -> IDENTIFICADOR
linea 3, operador: ::
linea 3, identificador: sistema_operativo
nombre -> nombre :: IDENTIFICADOR
linea 3, operador: ::
linea 3, identificador: entrada_salida
nombre -> nombre :: IDENTIFICADOR 
linea 3, palabra reservada: como 
linea 3, identificador: E_S
linea 3, delimitador: ;
libreria -> IMPORTAR LIBRERIA nombre COMO IDENTIFICADOR
linea 5, identificador: variable 
linea 5, delimitador: : 
linea 5, palabra reservada: entero
tipoBasico -> ENTERO 
linea 5, palabra reservada: corto
longitud -> CORTO
linea 5, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
declaracion -> declaracionObjeto
linea 7, identificador: PI 
linea 7, delimitador: : 
linea 7, palabra reservada: constante 
linea 7, palabra reservada: real
tipoBasico -> REAL 
linea 7, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 7, ctc real: 3.141592
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 7, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : CONSTANTE especificacionTipo ASIGNACION expresion ;

declaracion -> declaracionObjeto
declaracionMultiple -> declaracion declaracion  
linea 9, palabra reservada: subprograma 
linea 9, identificador: areaRectangulo 
linea 9, delimitador: (
linea 9, identificador: Base
linea 9, delimitador: :
linea 9, palabra reservada: real
tipoBasico -> REAL 
linea 9, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 9, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 9, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion 
linea 9, identificador: altura
linea 9, delimitador: :
linea 9, palabra reservada: Real
tipoBasico -> REAL 
linea 9, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 9, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 9, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion
declaracionParametrosMultiple -> declaracionParametros ';' declaracionParametros  
parametrizacion -> '(' declaracionParametrosMultiple ')' 
linea 9, palabra reservada: devolver 
linea 9, palabra reservada: real
tipoBasico -> REAL  
linea 10, palabra reservada: principio
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR parametrizacion tipoResultado    
linea 11, palabra reservada: devolver 
linea 11, identificador: Base
nombre -> IDENTIFICADOR
linea 11, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 11, identificador: altura
nombre -> IDENTIFICADOR
linea 11, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver  
linea 12, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 12, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 14, palabra reservada: subprograma 
linea 14, identificador: altaUsuario 
linea 14, delimitador: ( 
linea 14, identificador: nombre
linea 14, delimitador: ,
linea 14, identificador: direccion
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 14, delimitador: :
linea 14, palabra reservada: lista 
linea 14, palabra reservada: de 
linea 14, palabra reservada: caracter
tipoBasico -> CARACTER
linea 14, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> identificadorMultiple ':' especificacionTipo 
linea 14, identificador: edad
linea 14, delimitador: :
linea 14, palabra reservada: entero
tipoBasico -> ENTERO
linea 14, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo
declaracionParametrosMultiple -> declaracionParametros ';' declaracionParametros   
linea 14, identificador: peso
linea 14, delimitador: ,
linea 14, identificador: altura
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 14, delimitador: :
linea 14, palabra reservada: real
tipoBasico -> REAL
linea 14, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> identificadorMultiple ':' especificacionTipo
declaracionParametrosMultiple -> declaracionParametrosMultiple declaracionParametros  
parametrizacion -> '(' declaracionParametrosMultiple ')'  
linea 15, palabra reservada: principio
cabeceraSubprograma -> IDENTIFICADOR parametrizacion    
linea 16, delimitador: ;
instruccion -> ';'      
linea 18, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 18, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 20, palabra reservada: tipo 
linea 20, identificador: persona 
linea 20, palabra reservada: es 
linea 20, palabra reservada: registro  
linea 21, identificador: nombre 
linea 21, delimitador: : 
linea 21, palabra reservada: lista 
linea 21, palabra reservada: de 
linea 21, palabra reservada: caracter
tipoBasico -> CARACTER
linea 21, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'  
linea 22, identificador: edad 
linea 22, delimitador: : 
linea 22, palabra reservada: entero
tipoBasico -> ENTERO
linea 22, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campo campo  
linea 23, identificador: casada 
linea 23, delimitador: : 
linea 23, palabra reservada: booleano
tipoBasico -> BOOLEANO 
linea 23, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 23, palabra reservada: Falso
literal -> FASLO
primario -> literal
expresionUnaria -> primario
linea 23, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion ';'
campoMultiple -> campoMultiple campo
linea 24, palabra reservada: fin 
linea 24, palabra reservada: registro
tipoRegistro -> REGISTRO campoMultiple FIN REGISTRO
tipoEstructurado -> tipoRegistro
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 26, palabra reservada: tipo 
linea 26, identificador: esfera 
linea 26, palabra reservada: es 
linea 26, palabra reservada: clase 
linea 26, delimitador: (
linea 26, identificador: forma
nombre -> IDENTIFICADOR
linea 26, delimitador: )
superClase -> ( nombre )  
linea 27, palabra reservada: privado
visibilidad -> PRIVADO 
linea 27, identificador: radio 
linea 27, delimitador: : 
linea 27, palabra reservada: real
tipoBasico -> REAL 
linea 27, palabra reservada: largo
longitud -> LARGO
linea 27, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
componente -> declaracionObjeto
declaracionComponente -> visibilidad  componente  
linea 28, palabra reservada: constructor
modificador -> CONSTRUCTOR 
linea 28, palabra reservada: subprograma 
linea 28, identificador: esfera 
linea 28, delimitador: (
linea 28, identificador: radio 
linea 28, delimitador: : 
linea 28, palabra reservada: real
tipoBasico -> REAL
linea 28, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo
parametrizacion -> '(' declaracionParametros ')' 
linea 28, palabra reservada: devolver 
linea 28, identificador: esfera
nombre -> IDENTIFICADOR    
linea 29, palabra reservada: principio
especificacionTipo -> nombre
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR parametrizacion tipoResultado      
linea 30, identificador: esfera
linea 30, operador: ::
nombre -> IDENTIFICADOR
linea 30, identificador: radio
nombre -> nombre :: IDENTIFICADOR 
linea 30, operador: :=
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 30, identificador: radio
nombre -> IDENTIFICADOR
linea 30, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion    
linea 31, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 31, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
componente -> modificador declaracionSubprograma
declaracionComponente ->   componente
declaracionComponenteMultiple -> declaracionComponente  declaracionComponente  
linea 32, palabra reservada: publico
visibilidad -> PUBLICO 
linea 32, palabra reservada: subprograma 
linea 32, identificador: volumen 
linea 32, palabra reservada: devolver 
linea 32, palabra reservada: real
tipoBasico -> REAL    
linea 33, palabra reservada: principio
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR tipoResultado      
linea 34, palabra reservada: devolver 
linea 34, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, operador: /
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 34, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, operador: *
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion / expresion
linea 34, identificador: PI
nombre -> IDENTIFICADOR
linea 34, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion * expresion
linea 34, identificador: esfera
nombre -> IDENTIFICADOR
linea 34, operador: ::
linea 34, identificador: radio
nombre -> nombre :: IDENTIFICADOR
linea 34, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
linea 34, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver    
linea 35, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 35, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
componente -> declaracionSubprograma
declaracionComponente -> visibilidad  componente
declaracionComponenteMultiple -> declaracionComponenteMultiple  declaracionComponente  
linea 36, palabra reservada: fin 
linea 36, palabra reservada: clase
clase -> CLASE superclase declaracionComponenteMultiple FIN CLASE
tipoEstructurado -> clase
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 38, palabra reservada: tipo 
linea 38, identificador: color 
linea 38, palabra reservada: es 
linea 38, palabra reservada: enumeracion 
linea 38, palabra reservada: de 
linea 38, palabra reservada: entero
tipoBasico -> ENTERO  
linea 39, identificador: Rojo
tipoEscalar -> tipoBasico 
linea 39, operador: := 
linea 39, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 39, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion  
linea 40, identificador: Verde 
linea 40, operador: := 
linea 40, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 40, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion
elementoEnumeracionMultiple -> elementoEnumeracion ',' elementoEnumeracion  
linea 41, identificador: Azul 
linea 41, operador: := 
linea 41, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 42, palabra reservada: fin
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion
elementoEnumeracionMultiple -> elementoEnumeracionMultiple ',' elementoEnumeracion 
linea 42, palabra reservada: enumeracion
tipoEnumerado -> ENUMERACION DE tipoEscalar elementoEnumeracionMultiple FIN ENUMERACION
tipoEstructurado -> tipoEnumerado
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 44, palabra reservada: subprograma 
linea 44, identificador: Radio_Circunferencia 
linea 44, palabra reservada: devolver 
linea 44, palabra reservada: real
tipoBasico -> REAL    
linea 47, identificador: PI
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR tipoResultado
linea 47, delimitador: : 
linea 47, palabra reservada: constante 
linea 47, palabra reservada: real
tipoBasico -> REAL 
linea 47, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 47, ctc real: .3141592^1
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 47, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : CONSTANTE especificacionTipo ASIGNACION expresion ;

declaracion -> declaracionObjeto    
linea 50, identificador: area
linea 50, delimitador: , 
linea 50, identificador: radio
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 50, delimitador: : 
linea 50, palabra reservada: real
tipoBasico -> REAL
linea 50, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> identificadorMultiple : especificacionTipo ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracion declaracion  
linea 51, identificador: otra_cosa 
linea 51, delimitador: : 
linea 51, palabra reservada: real
tipoBasico -> REAL 
linea 51, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 51, ctc real: %x1F.34^-Faa
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 51, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion   
linea 53, palabra reservada: principio  
linea 55, identificador: E_S
linea 55, operador: ::
nombre -> IDENTIFICADOR
linea 55, identificador: escribir_consola
nombre -> nombre :: IDENTIFICADOR
linea 55, delimitador: (
linea 55, cadena: " %nRadio de la #{circunferencia#}%
	                        %o151%O144%X69%O157%x74%O141: " 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 56, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 56, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada  
linea 57, identificador: E_S
linea 57, operador: ::
nombre -> IDENTIFICADOR
linea 57, identificador: leer_consola
nombre -> nombre :: IDENTIFICADOR
linea 57, delimitador: (
linea 57, identificador: radio
linea 57, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 57, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccion instruccion     
linea 60, identificador: area 
linea 60, operador: :=
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 60, identificador: PI
nombre -> IDENTIFICADOR 
linea 60, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 60, identificador: radio
nombre -> IDENTIFICADOR 
linea 60, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria 
linea 60, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 60, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion
instruccionMultiple -> instruccionMultiple instruccion    
linea 64, identificador: escribir_consola
linea 64, delimitador: (
nombre -> IDENTIFICADOR
linea 64, cadena: " %nArea de la %
	                     %"circunferencia %": #f" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 65, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion 
linea 65, identificador: area
linea 65, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametro ',' definicionParametro
llamadaSubprograma -> nombre '(' definicionParametroMultiple ')'
linea 65, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccionMultiple instruccion 
linea 65, identificador: escribir_consola
linea 65, delimitador: (
nombre -> IDENTIFICADOR
linea 65, cadena: " %n" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 65, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 65, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccionMultiple instruccion  
linea 67, palabra reservada: DeVoLVeR 
linea 67, identificador: area
nombre -> IDENTIFICADOR
linea 67, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver
instruccionMultiple -> instruccionMultiple instruccion
linea 68, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO declaracionMultiple instruccionMultiple FIN 
linea 68, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 70, palabra reservada: tipo 
linea 70, identificador: entero_corto_sin_signo 
linea 70, palabra reservada: es 
linea 70, palabra reservada: entero
tipoBasico -> ENTERO 
linea 70, palabra reservada: corto
longitud -> CORTO
linea 70, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 71, palabra reservada: tipo 
linea 71, identificador: enteros_8bits 
linea 71, palabra reservada: es 
linea 71, palabra reservada: signo 
linea 71, palabra reservada: entero
tipoBasico -> ENTERO 
linea 71, palabra reservada: corto
longitud -> CORTO 
linea 71, palabra reservada: rango 
linea 71, operador: -
linea 71, ctc entera: 255
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> '-' primario 
linea 71, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 71, ctc entera: 255
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 71, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
rango -> expresion :: expresion
tipoEscalar -> SIGNO tipoBasico longitud RANGO rango
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 72, palabra reservada: tipo 
linea 72, identificador: reales_10000 
linea 72, palabra reservada: es 
linea 72, palabra reservada: real
tipoBasico -> REAL 
linea 72, palabra reservada: largo
longitud -> LARGO 
linea 72, palabra reservada: rango 
linea 72, ctc entera: 0
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 72, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 72, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 72, operador: ^
expresionPosfija -> expresionUnaria
linea 72, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 72, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
rango -> expresion :: expresion
tipoEscalar -> tipoBasico longitud RANGO rango
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 74, identificador: valores 
linea 74, delimitador: : 
linea 74, palabra reservada: lista 
linea 74, palabra reservada: de 
linea 74, identificador: entero_corto_sin_signo
nombre -> IDENTIFICADOR 
linea 74, operador: :=
especificacionTipo -> nombre
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 74, operador: [ 
linea 74, ctc entera: 88
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 74, ctc entera: 56
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion 
linea 74, ctc entera: 100
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion 
linea 74, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion 
linea 74, ctc entera: 25
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 74, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 74, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 75, identificador: valores2 
linea 75, delimitador: : 
linea 75, palabra reservada: lista 
linea 75, palabra reservada: de 
linea 75, palabra reservada: lista 
linea 75, palabra reservada: de 
linea 75, palabra reservada: entero
tipoBasico -> ENTERO 
linea 75, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 75, operador: [
linea 75, operador: [
linea 75, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 75, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
linea 75, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 75, operador: [
linea 75, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 75, ctc entera: 5
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 77, palabra reservada: tipo 
linea 77, identificador: nombre_etiqueta 
linea 77, palabra reservada: es 
linea 77, palabra reservada: registro   
linea 78, identificador: campo1 
linea 78, delimitador: : 
linea 78, palabra reservada: entero
tipoBasico -> ENTERO
linea 78, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'   
linea 79, identificador: campo2 
linea 79, delimitador: : 
linea 79, palabra reservada: real
tipoBasico -> REAL
linea 79, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campo campo   
linea 80, identificador: la_persona 
linea 80, delimitador: : 
linea 80, identificador: persona
nombre -> IDENTIFICADOR
linea 80, delimitador: ;
especificacionTipo -> nombre
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campoMultiple campo  
linea 81, palabra reservada: fin 
linea 81, palabra reservada: registro
tipoRegistro -> REGISTRO campoMultiple FIN REGISTRO
tipoEstructurado -> tipoRegistro
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 83, identificador: pepito 
linea 83, delimitador: : 
linea 83, identificador: persona
nombre -> IDENTIFICADOR 
linea 83, operador: :=
especificacionTipo -> nombre 
linea 83, operador: { 
linea 83, identificador: nombre 
linea 83, delimitador: => 
linea 83, cadena: "Pepe Perez" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 83, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion 
linea 83, identificador: edad 
linea 83, delimitador: => 
linea 83, ctc entera: 33
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 83, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion
campoValorMult -> campo_valor , campo_valor 
linea 83, identificador: casada 
linea 83, delimitador: => 
linea 83, palabra reservada: Verdadero
literal -> VERDADERO
primario -> literal
expresionUnaria -> primario 
linea 83, operador: }
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion
campoValorMult -> campoValorMult , campo_valor
enumeraciones -> [ campoValorMultiple ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 83, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 85, identificador: coches 
linea 85, delimitador: : 
linea 85, palabra reservada: diccionario 
linea 85, palabra reservada: de 
linea 85, identificador: color
nombre -> IDENTIFICADOR 
linea 85, operador: :=
especificacionTipo -> nombre
tipoDiccionario -> DICCIONARIO DE especificacionTipo
tipoNoEstructurado -> tipoDiccionario
especificacionTipo -> tipoNoEstructurado 
linea 85, operador: { 
linea 85, cadena: "golf"  
linea 85, delimitador: => 
linea 85, identificador: Rojo
nombre -> IDENTIFICADOR
linea 85, delimitador: ,
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion 
linea 85, cadena: "xantia"  
linea 85, delimitador: => 
linea 85, identificador: Verde
nombre -> IDENTIFICADOR
linea 85, delimitador: ,
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion
claveValorMult -> claveValor , claveValor 
linea 85, cadena: "corsa"  
linea 85, delimitador: => 
linea 85, identificador: Azul
nombre -> IDENTIFICADOR 
linea 85, operador: }
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion
claveValorMult -> claveValorMult , claveValor
enumeraciones -> [ claveValorMultiple ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 85, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 87, identificador: nuevos_valores 
linea 87, delimitador: : 
linea 87, palabra reservada: lista 
linea 87, palabra reservada: de 
linea 87, palabra reservada: entero
tipoBasico -> ENTERO 
linea 87, palabra reservada: corto
longitud -> CORTO 
linea 87, operador: :=
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 87, operador: [ 
linea 87, palabra reservada: si 
linea 87, identificador: elemento
nombre -> IDENTIFICADOR 
linea 87, operador: <
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 87, ctc entera: 80
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 87, palabra reservada: entonces
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion < expresion 
linea 87, identificador: elemento
nombre -> IDENTIFICADOR
linea 87, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
linea 87, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 87, palabra reservada: para
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresionCondicional -> pene duro [ si expresion entonces expresion 
linea 87, identificador: elemento 
linea 87, delimitador: : 
linea 87, palabra reservada: entero
tipoBasico -> ENTERO 
linea 87, palabra reservada: en
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 87, identificador: valores
nombre -> IDENTIFICADOR 
linea 87, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clausulaIteracion -> PARA IDENTIFICADOR EN ':' especifiacionTipo EN expresion
enumeraciones ->  expresionCondicional ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 87, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 89, palabra reservada: subprograma 
linea 89, identificador: escribir_lista 
linea 89, delimitador: (
linea 89, identificador: valores 
linea 89, delimitador: : 
linea 89, palabra reservada: lista 
linea 89, palabra reservada: de 
linea 89, palabra reservada: entero
tipoBasico -> ENTERO
linea 89, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo
parametrizacion -> '(' declaracionParametros ')'  
linea 90, identificador: indice
cabeceraSubprograma -> IDENTIFICADOR parametrizacion 
linea 90, delimitador: : 
linea 90, palabra reservada: entero
tipoBasico -> ENTERO 
linea 90, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 90, ctc entera: 0
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 90, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
linea 91, palabra reservada: principio  
linea 92, palabra reservada: prueba    
linea 93, palabra reservada: mientras 
linea 93, identificador: indice
nombre -> IDENTIFICADOR 
linea 93, operador: <
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 93, identificador: longitud
nombre -> IDENTIFICADOR
linea 93, delimitador: (
linea 93, identificador: valores
linea 93, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
primario -> llamada_subprograma
expresionUnaria -> primario      
linea 94, identificador: E_S
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion < expresion
clausulaIteracion -> MIENTRAS expresion
linea 94, operador: ::
nombre -> IDENTIFICADOR
linea 94, identificador: escribir_consola
nombre -> nombre :: IDENTIFICADOR
linea 94, delimitador: (
linea 94, identificador: valores
linea 94, operador: [
nombre -> IDENTIFICADOR
objeto -> nombre
linea 94, identificador: indice
nombre -> IDENTIFICADOR
linea 94, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ]
linea 94, delimitador: )
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 94, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada      
linea 95, identificador: indice 
linea 95, operador: :+
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIG_SUMA :+ 
linea 95, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 95, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion
instruccionMultiple -> instruccion instruccion      
linea 96, palabra reservada: fin 
linea 96, palabra reservada: bucle
instruccionBucle -> clausulaIteracion instruccionMultiple FIN BUCLE
instruccion -> instruccionBucle    
linea 97, palabra reservada: excepcion 
linea 97, delimitador: (
linea 97, identificador: longitud_excedida
nombre -> IDENTIFICADOR
linea 97, delimitador: )      
linea 98, identificador: E_S
linea 98, operador: ::
nombre -> IDENTIFICADOR
linea 98, identificador: escribir_consola
nombre -> nombre :: IDENTIFICADOR
linea 98, delimitador: (
linea 98, cadena: "Lista vacia %n" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 98, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 98, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada    
linea 99, palabra reservada: excepcion
clausulaExcepcionEspecifica -> EXCEPCION ( nombre ) intruccion      
linea 100, identificador: E_S
linea 100, operador: ::
nombre -> IDENTIFICADOR
linea 100, identificador: escribir_consola
nombre -> nombre :: IDENTIFICADOR
linea 100, delimitador: (
linea 100, cadena: "Excepcion indefinida %n" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 100, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 100, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada  
linea 101, palabra reservada: fin
clausulaExcepcionGeneral -> EXCEPCION instruccion
clausulasExcepcion -> clausulaExcepcionEspecifica clausulaExcepcionGeneral
clausulas -> clausulasExcepcion 
linea 101, palabra reservada: prueba
instrccuionCapturaDeExcepcion -> PRUEBA instruccion clausulas FIN PRUEBA
instruccion -> instruccionDeCapturaDeExcepcion
linea 102, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO declaracion instruccion FIN 
linea 102, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion    
codigoLibreria -> libreria declaracionMultiple
definicionLibreria -> LIBRERIA IDENTIFICADOR ; codigoLibreria
EXITO programa -> definicionLibreria