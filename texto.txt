
linea 1, palabra reservada: libreria 
linea 1, identificador: misc
linea 1, delimitador: ;
linea 3, palabra reservada: importar 
linea 3, palabra reservada: libreria 
linea 3, identificador: principal
nombre -> IDENTIFICADOR
linea 3, operador: ::
linea 3, identificador: sistema_operativo
nombre -> nombre :: IDENTIFICADOR
linea 3, operador: ::
linea 3, identificador: entrada_salida
nombre -> nombre :: IDENTIFICADOR 
linea 3, palabra reservada: como 
linea 3, identificador: E_S
linea 3, delimitador: ;
libreria -> IMPORTAR LIBRERIA nombre COMO IDENTIFICADOR
linea 5, identificador: variable 
linea 5, delimitador: : 
linea 5, palabra reservada: entero
tipoBasico -> ENTERO 
linea 5, palabra reservada: corto
longitud -> CORTO
linea 5, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
declaracion -> declaracionObjeto
linea 7, identificador: PI 
linea 7, delimitador: : 
linea 7, palabra reservada: constante 
linea 7, palabra reservada: real
tipoBasico -> REAL 
linea 7, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 7, ctc real: 3.141592
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 7, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : CONSTANTE especificacionTipo ASIGNACION expresion ;

declaracion -> declaracionObjeto
declaracionMultiple -> declaracion declaracion  
linea 9, palabra reservada: subprograma 
linea 9, identificador: areaRectangulo 
linea 9, delimitador: (
linea 9, identificador: Base
linea 9, delimitador: :
linea 9, palabra reservada: real
tipoBasico -> REAL 
linea 9, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 9, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 9, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion 
linea 9, identificador: altura
linea 9, delimitador: :
linea 9, palabra reservada: Real
tipoBasico -> REAL 
linea 9, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 9, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 9, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion
declaracionParametrosMultiple -> declaracionParametros ';' declaracionParametros  
parametrizacion -> '(' declaracionParametrosMultiple ')' 
linea 9, palabra reservada: devolver 
linea 9, palabra reservada: real
tipoBasico -> REAL  
linea 10, palabra reservada: principio
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR parametrizacion tipoResultado    
linea 11, palabra reservada: devolver 
linea 11, identificador: Base
nombre -> IDENTIFICADOR
linea 11, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 11, identificador: altura
nombre -> IDENTIFICADOR
linea 11, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver  
linea 12, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 12, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 14, palabra reservada: subprograma 
linea 14, identificador: altaUsuario 
linea 14, delimitador: ( 
linea 14, identificador: nombre
linea 14, delimitador: ,
linea 14, identificador: direccion
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 14, delimitador: :
linea 14, palabra reservada: lista 
linea 14, palabra reservada: de 
linea 14, palabra reservada: caracter
tipoBasico -> CARACTER
linea 14, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> identificadorMultiple ':' especificacionTipo 
linea 14, identificador: edad
linea 14, delimitador: :
linea 14, palabra reservada: entero
tipoBasico -> ENTERO
linea 14, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo
declaracionParametrosMultiple -> declaracionParametros ';' declaracionParametros   
linea 14, identificador: peso
linea 14, delimitador: ,
linea 14, identificador: altura
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 14, delimitador: :
linea 14, palabra reservada: real
tipoBasico -> REAL
linea 14, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> identificadorMultiple ':' especificacionTipo
declaracionParametrosMultiple -> declaracionParametrosMultiple declaracionParametros  
parametrizacion -> '(' declaracionParametrosMultiple ')'  
linea 15, palabra reservada: principio
cabeceraSubprograma -> IDENTIFICADOR parametrizacion    
linea 16, delimitador: ;
instruccion -> ';'      
linea 18, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 18, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 20, palabra reservada: tipo 
linea 20, identificador: persona 
linea 20, palabra reservada: es 
linea 20, palabra reservada: registro  
linea 21, identificador: nombre 
linea 21, delimitador: : 
linea 21, palabra reservada: lista 
linea 21, palabra reservada: de 
linea 21, palabra reservada: caracter
tipoBasico -> CARACTER
linea 21, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'  
linea 22, identificador: edad 
linea 22, delimitador: : 
linea 22, palabra reservada: entero
tipoBasico -> ENTERO
linea 22, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campo campo  
linea 23, identificador: casada 
linea 23, delimitador: : 
linea 23, palabra reservada: booleano
tipoBasico -> BOOLEANO 
linea 23, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 23, palabra reservada: Falso
literal -> FASLO
primario -> literal
expresionUnaria -> primario
linea 23, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion ';'
campoMultiple -> campoMultiple campo
linea 24, palabra reservada: fin 
linea 24, palabra reservada: registro
tipoRegistro -> REGISTRO campoMultiple FIN REGISTRO
tipoEstructurado -> tipoRegistro
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 26, palabra reservada: tipo 
linea 26, identificador: esfera 
linea 26, palabra reservada: es 
linea 26, palabra reservada: clase 
linea 26, delimitador: (
linea 26, identificador: forma
nombre -> IDENTIFICADOR
linea 26, delimitador: )
superClase -> ( nombre )  
linea 27, palabra reservada: privado
visibilidad -> PRIVADO 
linea 27, identificador: radio 
linea 27, delimitador: : 
linea 27, palabra reservada: real
tipoBasico -> REAL 
linea 27, palabra reservada: largo
longitud -> LARGO
linea 27, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
componente -> declaracionObjeto
declaracionComponente -> visibilidad  componente  
linea 28, palabra reservada: constructor
modificador -> CONSTRUCTOR 
linea 28, palabra reservada: subprograma 
linea 28, identificador: esfera 
linea 28, delimitador: (
linea 28, identificador: radio 
linea 28, delimitador: : 
linea 28, palabra reservada: real
tipoBasico -> REAL
linea 28, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo
parametrizacion -> '(' declaracionParametros ')' 
linea 28, palabra reservada: devolver 
linea 28, identificador: esfera
nombre -> IDENTIFICADOR    
linea 29, palabra reservada: principio
especificacionTipo -> nombre
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR parametrizacion tipoResultado      
linea 30, identificador: esfera
linea 30, operador: ::
nombre -> IDENTIFICADOR
linea 30, identificador: radio
nombre -> nombre :: IDENTIFICADOR 
linea 30, operador: :=
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 30, identificador: radio
nombre -> IDENTIFICADOR
linea 30, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion    
linea 31, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 31, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
componente -> modificador declaracionSubprograma
declaracionComponente ->   componente
declaracionComponenteMultiple -> declaracionComponente  declaracionComponente  
linea 32, palabra reservada: publico
visibilidad -> PUBLICO 
linea 32, palabra reservada: subprograma 
linea 32, identificador: volumen 
linea 32, palabra reservada: devolver 
linea 32, palabra reservada: real
tipoBasico -> REAL    
linea 33, palabra reservada: principio
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR tipoResultado      
linea 34, palabra reservada: devolver 
linea 34, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, operador: /
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 34, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, operador: *
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion / expresion
linea 34, identificador: PI
nombre -> IDENTIFICADOR
linea 34, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion * expresion
linea 34, identificador: esfera
nombre -> IDENTIFICADOR
linea 34, operador: ::
linea 34, identificador: radio
nombre -> nombre :: IDENTIFICADOR
linea 34, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
linea 34, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver    
linea 35, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 35, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
componente -> declaracionSubprograma
declaracionComponente -> visibilidad  componente
declaracionComponenteMultiple -> declaracionComponenteMultiple  declaracionComponente  
linea 36, palabra reservada: fin 
linea 36, palabra reservada: clase
clase -> CLASE superclase declaracionComponenteMultiple FIN CLASE
tipoEstructurado -> clase
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 38, palabra reservada: tipo 
linea 38, identificador: color 
linea 38, palabra reservada: es 
linea 38, palabra reservada: enumeracion 
linea 38, palabra reservada: de 
linea 38, palabra reservada: entero
tipoBasico -> ENTERO  
linea 39, identificador: Rojo
tipoEscalar -> tipoBasico 
linea 39, operador: := 
linea 39, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 39, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion  
linea 40, identificador: Verde 
linea 40, operador: := 
linea 40, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 40, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion
elementoEnumeracionMultiple -> elementoEnumeracion ',' elementoEnumeracion  
linea 41, identificador: Azul 
linea 41, operador: := 
linea 41, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 42, palabra reservada: fin
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion
elementoEnumeracionMultiple -> elementoEnumeracionMultiple ',' elementoEnumeracion 
linea 42, palabra reservada: enumeracion
tipoEnumerado -> ENUMERACION DE tipoEscalar elementoEnumeracionMultiple FIN ENUMERACION
tipoEstructurado -> tipoEnumerado
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 44, palabra reservada: subprograma 
linea 44, identificador: Radio_Circunferencia 
linea 44, palabra reservada: devolver 
linea 44, palabra reservada: real
tipoBasico -> REAL    
linea 47, identificador: PI
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR tipoResultado
linea 47, delimitador: : 
linea 47, palabra reservada: constante 
linea 47, palabra reservada: real
tipoBasico -> REAL 
linea 47, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 47, ctc real: .3141592^1
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 47, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : CONSTANTE especificacionTipo ASIGNACION expresion ;

declaracion -> declaracionObjeto    
linea 50, identificador: area
linea 50, delimitador: , 
linea 50, identificador: radio
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 50, delimitador: : 
linea 50, palabra reservada: real
tipoBasico -> REAL
linea 50, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> identificadorMultiple : especificacionTipo ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracion declaracion  
linea 51, identificador: otra_cosa 
linea 51, delimitador: : 
linea 51, palabra reservada: real
tipoBasico -> REAL 
linea 51, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 51, ctc real: %x1F.34^-Faa
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 51, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion   
linea 53, palabra reservada: principio  
linea 55, identificador: E_S
linea 55, operador: ::
nombre -> IDENTIFICADOR
linea 55, identificador: escribir_consola
nombre -> nombre :: IDENTIFICADOR
linea 55, delimitador: (
linea 55, cadena: " %nRadio de la #{circunferencia#}%
	                        %o151%O144%X69%O157%x74%O141: " 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 56, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 56, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada  
linea 57, identificador: E_S
linea 57, operador: ::
nombre -> IDENTIFICADOR
linea 57, identificador: leer_consola
nombre -> nombre :: IDENTIFICADOR
linea 57, delimitador: (
linea 57, identificador: radio
linea 57, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 57, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccion instruccion     
linea 60, identificador: area 
linea 60, operador: :=
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 60, identificador: PI
nombre -> IDENTIFICADOR 
linea 60, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 60, identificador: radio
nombre -> IDENTIFICADOR 
linea 60, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria 
linea 60, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 60, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion
instruccionMultiple -> instruccionMultiple instruccion    
linea 64, identificador: escribir_consola
linea 64, delimitador: (
nombre -> IDENTIFICADOR
linea 64, cadena: " %nArea de la %
	                     %"circunferencia %": #f" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 65, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion 
linea 65, identificador: area
linea 65, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametro ',' definicionParametro
llamadaSubprograma -> nombre '(' definicionParametroMultiple ')'
linea 65, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccionMultiple instruccion 
linea 65, identificador: escribir_consola
linea 65, delimitador: (
nombre -> IDENTIFICADOR
linea 65, cadena: " %n" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 65, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 65, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccionMultiple instruccion  
linea 67, palabra reservada: DeVoLVeR 
linea 67, identificador: area
nombre -> IDENTIFICADOR
linea 67, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver
instruccionMultiple -> instruccionMultiple instruccion
linea 68, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO declaracionMultiple instruccionMultiple FIN 
linea 68, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 70, palabra reservada: tipo 
linea 70, identificador: entero_corto_sin_signo 
linea 70, palabra reservada: es 
linea 70, palabra reservada: entero
tipoBasico -> ENTERO 
linea 70, palabra reservada: corto
longitud -> CORTO
linea 70, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 71, palabra reservada: tipo 
linea 71, identificador: enteros_8bits 
linea 71, palabra reservada: es 
linea 71, palabra reservada: signo 
linea 71, palabra reservada: entero
tipoBasico -> ENTERO 
linea 71, palabra reservada: corto
longitud -> CORTO 
linea 71, palabra reservada: rango 
linea 71, operador: -
linea 71, ctc entera: 255
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> '-' primario 
linea 71, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 71, ctc entera: 255
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 71, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
rango -> expresion :: expresion
tipoEscalar -> SIGNO tipoBasico longitud RANGO rango
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 72, palabra reservada: tipo 
linea 72, identificador: reales_10000 
linea 72, palabra reservada: es 
linea 72, palabra reservada: real
tipoBasico -> REAL 
linea 72, palabra reservada: largo
longitud -> LARGO 
linea 72, palabra reservada: rango 
linea 72, ctc entera: 0
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 72, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 72, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 72, operador: ^
expresionPosfija -> expresionUnaria
linea 72, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 72, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
rango -> expresion :: expresion
tipoEscalar -> tipoBasico longitud RANGO rango
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 74, identificador: valores 
linea 74, delimitador: : 
linea 74, palabra reservada: lista 
linea 74, palabra reservada: de 
linea 74, identificador: entero_corto_sin_signo
nombre -> IDENTIFICADOR 
linea 74, operador: :=
especificacionTipo -> nombre
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 74, operador: [ 
linea 74, ctc entera: 88
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 74, ctc entera: 56
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion 
linea 74, ctc entera: 100
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion 
linea 74, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion 
linea 74, ctc entera: 25
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 74, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 74, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 75, identificador: valores2 
linea 75, delimitador: : 
linea 75, palabra reservada: lista 
linea 75, palabra reservada: de 
linea 75, palabra reservada: lista 
linea 75, palabra reservada: de 
linea 75, palabra reservada: entero
tipoBasico -> ENTERO 
linea 75, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 75, operador: [
linea 75, operador: [
linea 75, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 75, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
linea 75, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 75, operador: [
linea 75, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 75, ctc entera: 5
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 77, palabra reservada: tipo 
linea 77, identificador: nombre_etiqueta 
linea 77, palabra reservada: es 
linea 77, palabra reservada: registro   
linea 78, identificador: campo1 
linea 78, delimitador: : 
linea 78, palabra reservada: entero
tipoBasico -> ENTERO
linea 78, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'   
linea 79, identificador: campo2 
linea 79, delimitador: : 
linea 79, palabra reservada: real
tipoBasico -> REAL
linea 79, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campo campo   
linea 80, identificador: la_persona 
linea 80, delimitador: : 
linea 80, identificador: persona
nombre -> IDENTIFICADOR
linea 80, delimitador: ;
especificacionTipo -> nombre
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campoMultiple campo  
linea 81, palabra reservada: fin 
linea 81, palabra reservada: registro
tipoRegistro -> REGISTRO campoMultiple FIN REGISTRO
tipoEstructurado -> tipoRegistro
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 83, identificador: pepito 
linea 83, delimitador: : 
linea 83, identificador: persona
nombre -> IDENTIFICADOR 
linea 83, operador: :=
especificacionTipo -> nombre 
linea 83, operador: { 
linea 83, identificador: nombre 
linea 83, delimitador: => 
linea 83, cadena: "Pepe Perez" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 83, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion 
linea 83, identificador: edad 
linea 83, delimitador: => 
linea 83, ctc entera: 33
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 83, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion
campoValorMult -> campo_valor , campo_valor 
linea 83, identificador: casada 
linea 83, delimitador: => 
linea 83, palabra reservada: Verdadero
literal -> VERDADERO
primario -> literal
expresionUnaria -> primario 
linea 83, operador: }
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion
campoValorMult -> campoValorMult , campo_valor
enumeraciones -> [ campoValorMultiple ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 83, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 85, identificador: coches 
linea 85, delimitador: : 
linea 85, palabra reservada: diccionario 
linea 85, palabra reservada: de 
linea 85, identificador: color
nombre -> IDENTIFICADOR 
linea 85, operador: :=
especificacionTipo -> nombre
tipoDiccionario -> DICCIONARIO DE especificacionTipo
tipoNoEstructurado -> tipoDiccionario
especificacionTipo -> tipoNoEstructurado 
linea 85, operador: { 
linea 85, cadena: "golf"  
linea 85, delimitador: => 
linea 85, identificador: Rojo
nombre -> IDENTIFICADOR
linea 85, delimitador: ,
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion 
linea 85, cadena: "xantia"  
linea 85, delimitador: => 
linea 85, identificador: Verde
nombre -> IDENTIFICADOR
linea 85, delimitador: ,
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion
claveValorMult -> claveValor , claveValor 
linea 85, cadena: "corsa"  
linea 85, delimitador: => 
linea 85, identificador: Azul
nombre -> IDENTIFICADOR 
linea 85, operador: }
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion
claveValorMult -> claveValorMult , claveValor
enumeraciones -> [ claveValorMultiple ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 85, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 87, identificador: nuevos_valores 
linea 87, delimitador: : 
linea 87, palabra reservada: lista 
linea 87, palabra reservada: de 
linea 87, palabra reservada: entero
tipoBasico -> ENTERO 
linea 87, palabra reservada: corto
longitud -> CORTO 
linea 87, operador: :=
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 87, operador: [ 
linea 87, palabra reservada: si 
linea 87, identificador: elemento
nombre -> IDENTIFICADOR 
linea 87, operador: <
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 87, ctc entera: 80
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 87, palabra reservada: entonces
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion < expresion 
linea 87, identificador: elemento
nombre -> IDENTIFICADOR
linea 87, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
linea 87, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 87, palabra reservada: para
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresionCondicional -> si expresion entonces expresion 
linea 87, identificador: elemento 
linea 87, delimitador: :
***************** syntax error
 
linea 87, palabra reservada: entero 
linea 87, palabra reservada: en 
linea 87, identificador: valores
nombre -> IDENTIFICADOR 
linea 87, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
reductora -> error expresion
reductora -> error expresion
reductora -> error expresion
linea 87, delimitador: ;
reductora -> error expresion
linea 89, palabra reservada: subprograma
reductora -> error expresion 
linea 89, identificador: escribir_lista
reductora -> error expresion 
linea 89, delimitador: (
reductora -> error expresion
linea 89, identificador: valores
reductora -> error expresion 
linea 89, delimitador: :
reductora -> error expresion 
linea 89, palabra reservada: lista
reductora -> error expresion 
linea 89, palabra reservada: de
reductora -> error expresion 
linea 89, palabra reservada: entero
reductora -> error expresion
linea 89, delimitador: )
reductora -> error expresion  
linea 90, identificador: indice
reductora -> error expresion 
linea 90, delimitador: :
reductora -> error expresion 
linea 90, palabra reservada: entero
reductora -> error expresion 
linea 90, operador: :=
reductora -> error expresion 
linea 90, ctc entera: 0
reductora -> error expresion
linea 90, delimitador: ;
reductora -> error expresion
linea 91, palabra reservada: principio
reductora -> error expresion  
linea 92, palabra reservada: prueba
reductora -> error expresion    
linea 93, palabra reservada: mientras
reductora -> error expresion 
linea 93, identificador: indice
reductora -> error expresion 
linea 93, operador: <
reductora -> error expresion 
linea 93, identificador: longitud
reductora -> error expresion
linea 93, delimitador: (
reductora -> error expresion
linea 93, identificador: valores
reductora -> error expresion
linea 93, delimitador: )
reductora -> error expresion      
linea 94, identificador: E_S
reductora -> error expresion
linea 94, operador: ::
reductora -> error expresion
linea 94, identificador: escribir_consola
reductora -> error expresion
linea 94, delimitador: (
reductora -> error expresion
linea 94, identificador: valores
reductora -> error expresion
linea 94, operador: [
reductora -> error expresion
linea 94, identificador: indice
reductora -> error expresion
linea 94, operador: ]
reductora -> error expresion
linea 94, delimitador: )
reductora -> error expresion
linea 94, delimitador: ;
reductora -> error expresion      
linea 95, identificador: indice
reductora -> error expresion 
linea 95, operador: :+
reductora -> error expresion 
linea 95, ctc entera: 1
reductora -> error expresion
linea 95, delimitador: ;
reductora -> error expresion      
linea 96, palabra reservada: fin 
linea 96, palabra reservada: bucle
reductora -> error expresion
reductora -> error expresion    
linea 97, palabra reservada: excepcion
reductora -> error expresion 
linea 97, delimitador: (
reductora -> error expresion
linea 97, identificador: longitud_excedida
reductora -> error expresion
linea 97, delimitador: )
reductora -> error expresion      
linea 98, identificador: E_S
reductora -> error expresion
linea 98, operador: ::
reductora -> error expresion
linea 98, identificador: escribir_consola
reductora -> error expresion
linea 98, delimitador: (
reductora -> error expresion
linea 98, cadena: "Lista vacia %n" 
reductora -> error expresion
linea 98, delimitador: )
reductora -> error expresion
linea 98, delimitador: ;
reductora -> error expresion    
linea 99, palabra reservada: excepcion
reductora -> error expresion      
linea 100, identificador: E_S
reductora -> error expresion
linea 100, operador: ::
reductora -> error expresion
linea 100, identificador: escribir_consola
reductora -> error expresion
linea 100, delimitador: (
reductora -> error expresion
linea 100, cadena: "Excepcion indefinida %n" 
reductora -> error expresion
linea 100, delimitador: )
reductora -> error expresion
linea 100, delimitador: ;
reductora -> error expresion  
linea 101, palabra reservada: fin 
linea 101, palabra reservada: prueba
reductora -> error expresion
reductora -> error expresion
linea 102, palabra reservada: fin 
linea 102, palabra reservada: subprograma
finSubprogramaError -> reductora FIN SUBPROGRAMA
declaracionSubprograma -> finSubprogramaError
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion    
codigoLibreria -> libreria declaracionMultiple
definicionLibreria -> LIBRERIA IDENTIFICADOR ; codigoLibreria
EXITO programa -> definicionLibreria
linea 1, palabra reservada: libreria 
linea 1, identificador: misc
linea 1, delimitador: ;
linea 3, palabra reservada: importar 
linea 3, palabra reservada: libreria 
linea 3, identificador: principal
nombre -> IDENTIFICADOR
linea 3, operador: ::
linea 3, identificador: sistema_operativo
nombre -> nombre :: IDENTIFICADOR
linea 3, operador: ::
linea 3, identificador: entrada_salida
nombre -> nombre :: IDENTIFICADOR 
linea 3, palabra reservada: como 
linea 3, identificador: E_S
linea 3, delimitador: ;
libreria -> IMPORTAR LIBRERIA nombre COMO IDENTIFICADOR
linea 5, identificador: variable 
linea 5, delimitador: : 
linea 5, palabra reservada: entero
tipoBasico -> ENTERO 
linea 5, palabra reservada: corto
longitud -> CORTO
linea 5, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
declaracion -> declaracionObjeto
linea 7, identificador: PI 
linea 7, delimitador: : 
linea 7, palabra reservada: constante 
linea 7, palabra reservada: real
tipoBasico -> REAL 
linea 7, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 7, ctc real: 3.141592
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 7, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : CONSTANTE especificacionTipo ASIGNACION expresion ;

declaracion -> declaracionObjeto
declaracionMultiple -> declaracion declaracion  
linea 9, palabra reservada: subprograma 
linea 9, identificador: areaRectangulo 
linea 9, delimitador: (
linea 9, identificador: Base
linea 9, delimitador: :
linea 9, palabra reservada: real
tipoBasico -> REAL 
linea 9, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 9, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 9, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion 
linea 9, identificador: altura
linea 9, delimitador: :
linea 9, palabra reservada: Real
tipoBasico -> REAL 
linea 9, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 9, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 9, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion
declaracionParametrosMultiple -> declaracionParametros ';' declaracionParametros  
parametrizacion -> '(' declaracionParametrosMultiple ')' 
linea 9, palabra reservada: devolver 
linea 9, palabra reservada: real
tipoBasico -> REAL  
linea 10, palabra reservada: principio
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR parametrizacion tipoResultado    
linea 11, palabra reservada: devolver 
linea 11, identificador: Base
nombre -> IDENTIFICADOR
linea 11, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 11, identificador: altura
nombre -> IDENTIFICADOR
linea 11, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver  
linea 12, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 12, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 14, palabra reservada: subprograma 
linea 14, identificador: altaUsuario 
linea 14, delimitador: ( 
linea 14, identificador: nombre
linea 14, delimitador: ,
linea 14, identificador: direccion
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 14, delimitador: :
linea 14, palabra reservada: lista 
linea 14, palabra reservada: de 
linea 14, palabra reservada: caracter
tipoBasico -> CARACTER
linea 14, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> identificadorMultiple ':' especificacionTipo 
linea 14, identificador: edad
linea 14, delimitador: :
linea 14, palabra reservada: entero
tipoBasico -> ENTERO
linea 14, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo
declaracionParametrosMultiple -> declaracionParametros ';' declaracionParametros   
linea 14, identificador: peso
linea 14, delimitador: ,
linea 14, identificador: altura
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 14, delimitador: :
linea 14, palabra reservada: real
tipoBasico -> REAL
linea 14, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> identificadorMultiple ':' especificacionTipo
declaracionParametrosMultiple -> declaracionParametrosMultiple declaracionParametros  
parametrizacion -> '(' declaracionParametrosMultiple ')'  
linea 15, palabra reservada: principio
cabeceraSubprograma -> IDENTIFICADOR parametrizacion    
linea 16, delimitador: ;
instruccion -> ';'      
linea 18, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 18, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 20, palabra reservada: tipo 
linea 20, identificador: persona 
linea 20, palabra reservada: es 
linea 20, palabra reservada: registro  
linea 21, identificador: nombre 
linea 21, delimitador: : 
linea 21, palabra reservada: lista 
linea 21, palabra reservada: de 
linea 21, palabra reservada: caracter
tipoBasico -> CARACTER
linea 21, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'  
linea 22, identificador: edad 
linea 22, delimitador: : 
linea 22, palabra reservada: entero
tipoBasico -> ENTERO
linea 22, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campo campo  
linea 23, identificador: casada 
linea 23, delimitador: : 
linea 23, palabra reservada: booleano
tipoBasico -> BOOLEANO 
linea 23, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 23, palabra reservada: Falso
literal -> FASLO
primario -> literal
expresionUnaria -> primario
linea 23, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion ';'
campoMultiple -> campoMultiple campo
linea 24, palabra reservada: fin 
linea 24, palabra reservada: registro
tipoRegistro -> REGISTRO campoMultiple FIN REGISTRO
tipoEstructurado -> tipoRegistro
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 26, palabra reservada: tipo 
linea 26, identificador: esfera 
linea 26, palabra reservada: es 
linea 26, palabra reservada: clase 
linea 26, delimitador: (
linea 26, identificador: forma
nombre -> IDENTIFICADOR
linea 26, delimitador: )
superClase -> ( nombre )  
linea 27, palabra reservada: privado
visibilidad -> PRIVADO 
linea 27, identificador: radio 
linea 27, delimitador: : 
linea 27, palabra reservada: real
tipoBasico -> REAL 
linea 27, palabra reservada: largo
longitud -> LARGO
linea 27, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
componente -> declaracionObjeto
declaracionComponente -> visibilidad  componente  
linea 28, palabra reservada: constructor
modificador -> CONSTRUCTOR 
linea 28, palabra reservada: subprograma 
linea 28, identificador: esfera 
linea 28, delimitador: (
linea 28, identificador: radio 
linea 28, delimitador: : 
linea 28, palabra reservada: real
tipoBasico -> REAL
linea 28, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo
parametrizacion -> '(' declaracionParametros ')' 
linea 28, palabra reservada: devolver 
linea 28, identificador: esfera
nombre -> IDENTIFICADOR    
linea 29, palabra reservada: principio
especificacionTipo -> nombre
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR parametrizacion tipoResultado      
linea 30, identificador: esfera
linea 30, operador: ::
nombre -> IDENTIFICADOR
linea 30, identificador: radio
nombre -> nombre :: IDENTIFICADOR 
linea 30, operador: :=
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 30, identificador: radio
nombre -> IDENTIFICADOR
linea 30, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion    
linea 31, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 31, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
componente -> modificador declaracionSubprograma
declaracionComponente ->   componente
declaracionComponenteMultiple -> declaracionComponente  declaracionComponente  
linea 32, palabra reservada: publico
visibilidad -> PUBLICO 
linea 32, palabra reservada: subprograma 
linea 32, identificador: volumen 
linea 32, palabra reservada: devolver 
linea 32, palabra reservada: real
tipoBasico -> REAL    
linea 33, palabra reservada: principio
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR tipoResultado      
linea 34, palabra reservada: devolver 
linea 34, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, operador: /
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 34, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, operador: *
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion / expresion
linea 34, identificador: PI
nombre -> IDENTIFICADOR
linea 34, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion * expresion
linea 34, identificador: esfera
nombre -> IDENTIFICADOR
linea 34, operador: ::
linea 34, identificador: radio
nombre -> nombre :: IDENTIFICADOR
linea 34, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
linea 34, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver    
linea 35, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 35, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
componente -> declaracionSubprograma
declaracionComponente -> visibilidad  componente
declaracionComponenteMultiple -> declaracionComponenteMultiple  declaracionComponente  
linea 36, palabra reservada: fin 
linea 36, palabra reservada: clase
clase -> CLASE superclase declaracionComponenteMultiple FIN CLASE
tipoEstructurado -> clase
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 38, palabra reservada: tipo 
linea 38, identificador: color 
linea 38, palabra reservada: es 
linea 38, palabra reservada: enumeracion 
linea 38, palabra reservada: de 
linea 38, palabra reservada: entero
tipoBasico -> ENTERO  
linea 39, identificador: Rojo
tipoEscalar -> tipoBasico 
linea 39, operador: := 
linea 39, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 39, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion  
linea 40, identificador: Verde 
linea 40, operador: := 
linea 40, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 40, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion
elementoEnumeracionMultiple -> elementoEnumeracion ',' elementoEnumeracion  
linea 41, identificador: Azul 
linea 41, operador: := 
linea 41, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 42, palabra reservada: fin
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion
elementoEnumeracionMultiple -> elementoEnumeracionMultiple ',' elementoEnumeracion 
linea 42, palabra reservada: enumeracion
tipoEnumerado -> ENUMERACION DE tipoEscalar elementoEnumeracionMultiple FIN ENUMERACION
tipoEstructurado -> tipoEnumerado
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 44, palabra reservada: subprograma 
linea 44, identificador: Radio_Circunferencia 
linea 44, palabra reservada: devolver 
linea 44, palabra reservada: real
tipoBasico -> REAL    
linea 47, identificador: PI
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR tipoResultado
linea 47, delimitador: : 
linea 47, palabra reservada: constante 
linea 47, palabra reservada: real
tipoBasico -> REAL 
linea 47, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 47, ctc real: .3141592^1
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 47, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : CONSTANTE especificacionTipo ASIGNACION expresion ;

declaracion -> declaracionObjeto    
linea 50, identificador: area
linea 50, delimitador: , 
linea 50, identificador: radio
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 50, delimitador: : 
linea 50, palabra reservada: real
tipoBasico -> REAL
linea 50, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> identificadorMultiple : especificacionTipo ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracion declaracion  
linea 51, identificador: otra_cosa 
linea 51, delimitador: : 
linea 51, palabra reservada: real
tipoBasico -> REAL 
linea 51, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 51, ctc real: %x1F.34^-Faa
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 51, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion   
linea 53, palabra reservada: principio  
linea 55, identificador: E_S
linea 55, operador: ::
nombre -> IDENTIFICADOR
linea 55, identificador: escribir_consola
nombre -> nombre :: IDENTIFICADOR
linea 55, delimitador: (
linea 55, cadena: " %nRadio de la #{circunferencia#}%
	                        %o151%O144%X69%O157%x74%O141: " 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 56, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 56, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada  
linea 57, identificador: E_S
linea 57, operador: ::
nombre -> IDENTIFICADOR
linea 57, identificador: leer_consola
nombre -> nombre :: IDENTIFICADOR
linea 57, delimitador: (
linea 57, identificador: radio
linea 57, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 57, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccion instruccion     
linea 60, identificador: area 
linea 60, operador: :=
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 60, identificador: PI
nombre -> IDENTIFICADOR 
linea 60, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 60, identificador: radio
nombre -> IDENTIFICADOR 
linea 60, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria 
linea 60, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 60, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion
instruccionMultiple -> instruccionMultiple instruccion    
linea 64, identificador: escribir_consola
linea 64, delimitador: (
nombre -> IDENTIFICADOR
linea 64, cadena: " %nArea de la %
	                     %"circunferencia %": #f" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 65, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion 
linea 65, identificador: area
linea 65, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametro ',' definicionParametro
llamadaSubprograma -> nombre '(' definicionParametroMultiple ')'
linea 65, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccionMultiple instruccion 
linea 65, identificador: escribir_consola
linea 65, delimitador: (
nombre -> IDENTIFICADOR
linea 65, cadena: " %n" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 65, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 65, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccionMultiple instruccion  
linea 67, palabra reservada: DeVoLVeR 
linea 67, identificador: area
nombre -> IDENTIFICADOR
linea 67, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver
instruccionMultiple -> instruccionMultiple instruccion
linea 68, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO declaracionMultiple instruccionMultiple FIN 
linea 68, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 70, palabra reservada: tipo 
linea 70, identificador: entero_corto_sin_signo 
linea 70, palabra reservada: es 
linea 70, palabra reservada: entero
tipoBasico -> ENTERO 
linea 70, palabra reservada: corto
longitud -> CORTO
linea 70, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 71, palabra reservada: tipo 
linea 71, identificador: enteros_8bits 
linea 71, palabra reservada: es 
linea 71, palabra reservada: signo 
linea 71, palabra reservada: entero
tipoBasico -> ENTERO 
linea 71, palabra reservada: corto
longitud -> CORTO 
linea 71, palabra reservada: rango 
linea 71, operador: -
linea 71, ctc entera: 255
literal -> CTC_ENTERA
primario -> literal 
linea 71, delimitador: ..
expresionUnaria -> '-' primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 71, ctc entera: 255
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 71, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
rango -> expresion :: expresion
tipoEscalar -> SIGNO tipoBasico longitud RANGO rango
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 72, palabra reservada: tipo 
linea 72, identificador: reales_10000 
linea 72, palabra reservada: es 
linea 72, palabra reservada: real
tipoBasico -> REAL 
linea 72, palabra reservada: largo
longitud -> LARGO 
linea 72, palabra reservada: rango 
linea 72, ctc entera: 0
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 72, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 72, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 72, operador: ^
expresionPosfija -> expresionUnaria
linea 72, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 72, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
rango -> expresion :: expresion
tipoEscalar -> tipoBasico longitud RANGO rango
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 74, identificador: valores 
linea 74, delimitador: : 
linea 74, palabra reservada: lista 
linea 74, palabra reservada: de 
linea 74, identificador: entero_corto_sin_signo
nombre -> IDENTIFICADOR 
linea 74, operador: :=
especificacionTipo -> nombre
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 74, operador: [ 
linea 74, ctc entera: 88
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 74, ctc entera: 56
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion 
linea 74, ctc entera: 100
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion 
linea 74, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion 
linea 74, ctc entera: 25
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 74, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 74, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 75, identificador: valores2 
linea 75, delimitador: : 
linea 75, palabra reservada: lista 
linea 75, palabra reservada: de 
linea 75, palabra reservada: lista 
linea 75, palabra reservada: de 
linea 75, palabra reservada: entero
tipoBasico -> ENTERO 
linea 75, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 75, operador: [
linea 75, operador: [
linea 75, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 75, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
linea 75, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 75, operador: [
linea 75, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 75, ctc entera: 5
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 77, palabra reservada: tipo 
linea 77, identificador: nombre_etiqueta 
linea 77, palabra reservada: es 
linea 77, palabra reservada: registro   
linea 78, identificador: campo1 
linea 78, delimitador: : 
linea 78, palabra reservada: entero
tipoBasico -> ENTERO
linea 78, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'   
linea 79, identificador: campo2 
linea 79, delimitador: : 
linea 79, palabra reservada: real
tipoBasico -> REAL
linea 79, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campo campo   
linea 80, identificador: la_persona 
linea 80, delimitador: : 
linea 80, identificador: persona
nombre -> IDENTIFICADOR
linea 80, delimitador: ;
especificacionTipo -> nombre
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campoMultiple campo  
linea 81, palabra reservada: fin 
linea 81, palabra reservada: registro
tipoRegistro -> REGISTRO campoMultiple FIN REGISTRO
tipoEstructurado -> tipoRegistro
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 83, identificador: pepito 
linea 83, delimitador: : 
linea 83, identificador: persona
nombre -> IDENTIFICADOR 
linea 83, operador: :=
especificacionTipo -> nombre 
linea 83, operador: { 
linea 83, identificador: nombre 
linea 83, delimitador: => 
linea 83, cadena: "Pepe Perez" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 83, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion 
linea 83, identificador: edad 
linea 83, delimitador: => 
linea 83, ctc entera: 33
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 83, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion
campoValorMult -> campo_valor , campo_valor 
linea 83, identificador: casada 
linea 83, delimitador: => 
linea 83, palabra reservada: Verdadero
literal -> VERDADERO
primario -> literal
expresionUnaria -> primario 
linea 83, operador: }
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion
campoValorMult -> campoValorMult , campo_valor
enumeraciones -> [ campoValorMultiple ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 83, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 85, identificador: coches 
linea 85, delimitador: : 
linea 85, palabra reservada: diccionario 
linea 85, palabra reservada: de 
linea 85, identificador: color
nombre -> IDENTIFICADOR 
linea 85, operador: :=
especificacionTipo -> nombre
tipoDiccionario -> DICCIONARIO DE especificacionTipo
tipoNoEstructurado -> tipoDiccionario
especificacionTipo -> tipoNoEstructurado 
linea 85, operador: { 
linea 85, cadena: "golf"  
linea 85, delimitador: => 
linea 85, identificador: Rojo
nombre -> IDENTIFICADOR
linea 85, delimitador: ,
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion 
linea 85, cadena: "xantia"  
linea 85, delimitador: => 
linea 85, identificador: Verde
nombre -> IDENTIFICADOR
linea 85, delimitador: ,
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion
claveValorMult -> claveValor , claveValor 
linea 85, cadena: "corsa"  
linea 85, delimitador: => 
linea 85, identificador: Azul
nombre -> IDENTIFICADOR 
linea 85, operador: }
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion
claveValorMult -> claveValorMult , claveValor
enumeraciones -> [ claveValorMultiple ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 85, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 87, identificador: nuevos_valores 
linea 87, delimitador: : 
linea 87, palabra reservada: lista 
linea 87, palabra reservada: de 
linea 87, palabra reservada: entero
tipoBasico -> ENTERO 
linea 87, palabra reservada: corto
longitud -> CORTO 
linea 87, operador: :=
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 87, operador: [ 
linea 87, palabra reservada: si 
linea 87, identificador: elemento
nombre -> IDENTIFICADOR 
linea 87, operador: <
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 87, ctc entera: 80
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 87, palabra reservada: entonces
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion < expresion 
linea 87, identificador: elemento
nombre -> IDENTIFICADOR
linea 87, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
linea 87, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 87, palabra reservada: para
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionCondicional -> expresion 
linea 87, identificador: elemento 
linea 87, delimitador: :
***************** syntax error
 
linea 87, palabra reservada: entero 
linea 87, palabra reservada: en 
linea 87, identificador: valores
nombre -> IDENTIFICADOR 
linea 87, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionCondicional -> expresion
linea 87, delimitador: ;
linea 89, palabra reservada: subprograma 
linea 89, identificador: escribir_lista
nombre -> IDENTIFICADOR 
linea 89, delimitador: (
linea 89, identificador: valores 
linea 89, delimitador: :
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionCondicional -> expresion
***************** syntax error
 
linea 89, palabra reservada: lista 
linea 89, palabra reservada: de 
linea 89, palabra reservada: entero
linea 89, delimitador: )  
linea 90, identificador: indice
nombre -> IDENTIFICADOR 
linea 90, delimitador: :
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionCondicional -> expresion 
linea 90, palabra reservada: entero 
linea 90, operador: := 
linea 90, ctc entera: 0
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 90, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
reductora -> error expresion
reductora -> error expresion
reductora -> error expresion
linea 91, palabra reservada: principio
reductora -> error expresion  
linea 92, palabra reservada: prueba
reductora -> error expresion    
linea 93, palabra reservada: mientras
reductora -> error expresion 
linea 93, identificador: indice
reductora -> error expresion 
linea 93, operador: <
reductora -> error expresion 
linea 93, identificador: longitud
reductora -> error expresion
linea 93, delimitador: (
reductora -> error expresion
linea 93, identificador: valores
reductora -> error expresion
linea 93, delimitador: )
reductora -> error expresion      
linea 94, identificador: E_S
reductora -> error expresion
linea 94, operador: ::
reductora -> error expresion
linea 94, identificador: escribir_consola
reductora -> error expresion
linea 94, delimitador: (
reductora -> error expresion
linea 94, identificador: valores
reductora -> error expresion
linea 94, operador: [
reductora -> error expresion
linea 94, identificador: indice
reductora -> error expresion
linea 94, operador: ]
reductora -> error expresion
linea 94, delimitador: )
reductora -> error expresion
linea 94, delimitador: ;
reductora -> error expresion      
linea 95, identificador: indice
reductora -> error expresion 
linea 95, operador: :+
reductora -> error expresion 
linea 95, ctc entera: 1
reductora -> error expresion
linea 95, delimitador: ;
reductora -> error expresion      
linea 96, palabra reservada: fin 
linea 96, palabra reservada: bucle
reductora -> error expresion
reductora -> error expresion    
linea 97, palabra reservada: excepcion
reductora -> error expresion 
linea 97, delimitador: (
reductora -> error expresion
linea 97, identificador: longitud_excedida
reductora -> error expresion
linea 97, delimitador: )
reductora -> error expresion      
linea 98, identificador: E_S
reductora -> error expresion
linea 98, operador: ::
reductora -> error expresion
linea 98, identificador: escribir_consola
reductora -> error expresion
linea 98, delimitador: (
reductora -> error expresion
linea 98, cadena: "Lista vacia %n" 
reductora -> error expresion
linea 98, delimitador: )
reductora -> error expresion
linea 98, delimitador: ;
reductora -> error expresion    
linea 99, palabra reservada: excepcion
reductora -> error expresion      
linea 100, identificador: E_S
reductora -> error expresion
linea 100, operador: ::
reductora -> error expresion
linea 100, identificador: escribir_consola
reductora -> error expresion
linea 100, delimitador: (
reductora -> error expresion
linea 100, cadena: "Excepcion indefinida %n" 
reductora -> error expresion
linea 100, delimitador: )
reductora -> error expresion
linea 100, delimitador: ;
reductora -> error expresion  
linea 101, palabra reservada: fin 
linea 101, palabra reservada: prueba
reductora -> error expresion
reductora -> error expresion
linea 102, palabra reservada: fin 
linea 102, palabra reservada: subprograma
finSubprogramaError -> reductora FIN SUBPROGRAMA
declaracionSubprograma -> finSubprogramaError
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion    
codigoLibreria -> libreria declaracionMultiple
definicionLibreria -> LIBRERIA IDENTIFICADOR ; codigoLibreria
EXITO programa -> definicionLibreria
linea 1, palabra reservada: libreria 
linea 1, identificador: misc
linea 1, delimitador: ;
linea 3, palabra reservada: importar 
linea 3, palabra reservada: libreria 
linea 3, identificador: principal
nombre -> IDENTIFICADOR
linea 3, operador: ::
linea 3, identificador: sistema_operativo
nombre -> nombre :: IDENTIFICADOR
linea 3, operador: ::
linea 3, identificador: entrada_salida
nombre -> nombre :: IDENTIFICADOR 
linea 3, palabra reservada: como 
linea 3, identificador: E_S
linea 3, delimitador: ;
libreria -> IMPORTAR LIBRERIA nombre COMO IDENTIFICADOR
linea 5, identificador: variable 
linea 5, delimitador: : 
linea 5, palabra reservada: entero
tipoBasico -> ENTERO 
linea 5, palabra reservada: corto
longitud -> CORTO
linea 5, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
declaracion -> declaracionObjeto
linea 7, identificador: PI 
linea 7, delimitador: : 
linea 7, palabra reservada: constante 
linea 7, palabra reservada: real
tipoBasico -> REAL 
linea 7, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 7, ctc real: 3.141592
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 7, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : CONSTANTE especificacionTipo ASIGNACION expresion ;

declaracion -> declaracionObjeto
declaracionMultiple -> declaracion declaracion  
linea 9, palabra reservada: subprograma 
linea 9, identificador: areaRectangulo 
linea 9, delimitador: (
linea 9, identificador: Base
linea 9, delimitador: :
linea 9, palabra reservada: real
tipoBasico -> REAL 
linea 9, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 9, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 9, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion 
linea 9, identificador: altura
linea 9, delimitador: :
linea 9, palabra reservada: Real
tipoBasico -> REAL 
linea 9, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 9, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 9, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion
declaracionParametrosMultiple -> declaracionParametros ';' declaracionParametros  
parametrizacion -> '(' declaracionParametrosMultiple ')' 
linea 9, palabra reservada: devolver 
linea 9, palabra reservada: real
tipoBasico -> REAL  
linea 10, palabra reservada: principio
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR parametrizacion tipoResultado    
linea 11, palabra reservada: devolver 
linea 11, identificador: Base
nombre -> IDENTIFICADOR
linea 11, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 11, identificador: altura
nombre -> IDENTIFICADOR
linea 11, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver  
linea 12, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 12, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 14, palabra reservada: subprograma 
linea 14, identificador: altaUsuario 
linea 14, delimitador: ( 
linea 14, identificador: nombre
linea 14, delimitador: ,
linea 14, identificador: direccion
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 14, delimitador: :
linea 14, palabra reservada: lista 
linea 14, palabra reservada: de 
linea 14, palabra reservada: caracter
tipoBasico -> CARACTER
linea 14, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> identificadorMultiple ':' especificacionTipo 
linea 14, identificador: edad
linea 14, delimitador: :
linea 14, palabra reservada: entero
tipoBasico -> ENTERO
linea 14, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo
declaracionParametrosMultiple -> declaracionParametros ';' declaracionParametros   
linea 14, identificador: peso
linea 14, delimitador: ,
linea 14, identificador: altura
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 14, delimitador: :
linea 14, palabra reservada: real
tipoBasico -> REAL
linea 14, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> identificadorMultiple ':' especificacionTipo
declaracionParametrosMultiple -> declaracionParametrosMultiple declaracionParametros  
parametrizacion -> '(' declaracionParametrosMultiple ')'  
linea 15, palabra reservada: principio
cabeceraSubprograma -> IDENTIFICADOR parametrizacion    
linea 16, delimitador: ;
instruccion -> ';'      
linea 18, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 18, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 20, palabra reservada: tipo 
linea 20, identificador: persona 
linea 20, palabra reservada: es 
linea 20, palabra reservada: registro  
linea 21, identificador: nombre 
linea 21, delimitador: : 
linea 21, palabra reservada: lista 
linea 21, palabra reservada: de 
linea 21, palabra reservada: caracter
tipoBasico -> CARACTER
linea 21, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'  
linea 22, identificador: edad 
linea 22, delimitador: : 
linea 22, palabra reservada: entero
tipoBasico -> ENTERO
linea 22, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campo campo  
linea 23, identificador: casada 
linea 23, delimitador: : 
linea 23, palabra reservada: booleano
tipoBasico -> BOOLEANO 
linea 23, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 23, palabra reservada: Falso
literal -> FASLO
primario -> literal
expresionUnaria -> primario
linea 23, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion ';'
campoMultiple -> campoMultiple campo
linea 24, palabra reservada: fin 
linea 24, palabra reservada: registro
tipoRegistro -> REGISTRO campoMultiple FIN REGISTRO
tipoEstructurado -> tipoRegistro
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 26, palabra reservada: tipo 
linea 26, identificador: esfera 
linea 26, palabra reservada: es 
linea 26, palabra reservada: clase 
linea 26, delimitador: (
linea 26, identificador: forma
nombre -> IDENTIFICADOR
linea 26, delimitador: )
superClase -> ( nombre )  
linea 27, palabra reservada: privado
visibilidad -> PRIVADO 
linea 27, identificador: radio 
linea 27, delimitador: : 
linea 27, palabra reservada: real
tipoBasico -> REAL 
linea 27, palabra reservada: largo
longitud -> LARGO
linea 27, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
componente -> declaracionObjeto
declaracionComponente -> visibilidad  componente  
linea 28, palabra reservada: constructor
modificador -> CONSTRUCTOR 
linea 28, palabra reservada: subprograma 
linea 28, identificador: esfera 
linea 28, delimitador: (
linea 28, identificador: radio 
linea 28, delimitador: : 
linea 28, palabra reservada: real
tipoBasico -> REAL
linea 28, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo
parametrizacion -> '(' declaracionParametros ')' 
linea 28, palabra reservada: devolver 
linea 28, identificador: esfera
nombre -> IDENTIFICADOR    
linea 29, palabra reservada: principio
especificacionTipo -> nombre
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR parametrizacion tipoResultado      
linea 30, identificador: esfera
linea 30, operador: ::
nombre -> IDENTIFICADOR
linea 30, identificador: radio
nombre -> nombre :: IDENTIFICADOR 
linea 30, operador: :=
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 30, identificador: radio
nombre -> IDENTIFICADOR
linea 30, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion    
linea 31, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 31, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
componente -> modificador declaracionSubprograma
declaracionComponente ->   componente
declaracionComponenteMultiple -> declaracionComponente  declaracionComponente  
linea 32, palabra reservada: publico
visibilidad -> PUBLICO 
linea 32, palabra reservada: subprograma 
linea 32, identificador: volumen 
linea 32, palabra reservada: devolver 
linea 32, palabra reservada: real
tipoBasico -> REAL    
linea 33, palabra reservada: principio
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR tipoResultado      
linea 34, palabra reservada: devolver 
linea 34, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, operador: /
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 34, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, operador: *
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion / expresion
linea 34, identificador: PI
nombre -> IDENTIFICADOR
linea 34, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion * expresion
linea 34, identificador: esfera
nombre -> IDENTIFICADOR
linea 34, operador: ::
linea 34, identificador: radio
nombre -> nombre :: IDENTIFICADOR
linea 34, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
linea 34, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver    
linea 35, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 35, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
componente -> declaracionSubprograma
declaracionComponente -> visibilidad  componente
declaracionComponenteMultiple -> declaracionComponenteMultiple  declaracionComponente  
linea 36, palabra reservada: fin 
linea 36, palabra reservada: clase
clase -> CLASE superclase declaracionComponenteMultiple FIN CLASE
tipoEstructurado -> clase
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 38, palabra reservada: tipo 
linea 38, identificador: color 
linea 38, palabra reservada: es 
linea 38, palabra reservada: enumeracion 
linea 38, palabra reservada: de 
linea 38, palabra reservada: entero
tipoBasico -> ENTERO  
linea 39, identificador: Rojo
tipoEscalar -> tipoBasico 
linea 39, operador: := 
linea 39, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 39, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion  
linea 40, identificador: Verde 
linea 40, operador: := 
linea 40, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 40, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion
elementoEnumeracionMultiple -> elementoEnumeracion ',' elementoEnumeracion  
linea 41, identificador: Azul 
linea 41, operador: := 
linea 41, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 42, palabra reservada: fin
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion
elementoEnumeracionMultiple -> elementoEnumeracionMultiple ',' elementoEnumeracion 
linea 42, palabra reservada: enumeracion
tipoEnumerado -> ENUMERACION DE tipoEscalar elementoEnumeracionMultiple FIN ENUMERACION
tipoEstructurado -> tipoEnumerado
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 44, palabra reservada: subprograma 
linea 44, identificador: Radio_Circunferencia 
linea 44, palabra reservada: devolver 
linea 44, palabra reservada: real
tipoBasico -> REAL    
linea 47, identificador: PI
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR tipoResultado
linea 47, delimitador: : 
linea 47, palabra reservada: constante 
linea 47, palabra reservada: real
tipoBasico -> REAL 
linea 47, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 47, ctc real: .3141592^1
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 47, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : CONSTANTE especificacionTipo ASIGNACION expresion ;

declaracion -> declaracionObjeto    
linea 50, identificador: area
linea 50, delimitador: , 
linea 50, identificador: radio
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 50, delimitador: : 
linea 50, palabra reservada: real
tipoBasico -> REAL
linea 50, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> identificadorMultiple : especificacionTipo ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracion declaracion  
linea 51, identificador: otra_cosa 
linea 51, delimitador: : 
linea 51, palabra reservada: real
tipoBasico -> REAL 
linea 51, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 51, ctc real: %x1F.34^-Faa
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 51, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion   
linea 53, palabra reservada: principio  
linea 55, identificador: E_S
linea 55, operador: ::
nombre -> IDENTIFICADOR
linea 55, identificador: escribir_consola
nombre -> nombre :: IDENTIFICADOR
linea 55, delimitador: (
linea 55, cadena: " %nRadio de la #{circunferencia#}%
	                        %o151%O144%X69%O157%x74%O141: " 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 56, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 56, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada  
linea 57, identificador: E_S
linea 57, operador: ::
nombre -> IDENTIFICADOR
linea 57, identificador: leer_consola
nombre -> nombre :: IDENTIFICADOR
linea 57, delimitador: (
linea 57, identificador: radio
linea 57, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 57, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccion instruccion     
linea 60, identificador: area 
linea 60, operador: :=
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 60, identificador: PI
nombre -> IDENTIFICADOR 
linea 60, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 60, identificador: radio
nombre -> IDENTIFICADOR 
linea 60, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria 
linea 60, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 60, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion
instruccionMultiple -> instruccionMultiple instruccion    
linea 64, identificador: escribir_consola
linea 64, delimitador: (
nombre -> IDENTIFICADOR
linea 64, cadena: " %nArea de la %
	                     %"circunferencia %": #f" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 65, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion 
linea 65, identificador: area
linea 65, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametro ',' definicionParametro
llamadaSubprograma -> nombre '(' definicionParametroMultiple ')'
linea 65, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccionMultiple instruccion 
linea 65, identificador: escribir_consola
linea 65, delimitador: (
nombre -> IDENTIFICADOR
linea 65, cadena: " %n" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 65, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 65, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccionMultiple instruccion  
linea 67, palabra reservada: DeVoLVeR 
linea 67, identificador: area
nombre -> IDENTIFICADOR
linea 67, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver
instruccionMultiple -> instruccionMultiple instruccion
linea 68, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO declaracionMultiple instruccionMultiple FIN 
linea 68, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 70, palabra reservada: tipo 
linea 70, identificador: entero_corto_sin_signo 
linea 70, palabra reservada: es 
linea 70, palabra reservada: entero
tipoBasico -> ENTERO 
linea 70, palabra reservada: corto
longitud -> CORTO
linea 70, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 71, palabra reservada: tipo 
linea 71, identificador: enteros_8bits 
linea 71, palabra reservada: es 
linea 71, palabra reservada: signo 
linea 71, palabra reservada: entero
tipoBasico -> ENTERO 
linea 71, palabra reservada: corto
longitud -> CORTO 
linea 71, palabra reservada: rango 
linea 71, operador: -
linea 71, ctc entera: 255
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> '-' primario 
linea 71, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 71, ctc entera: 255
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 71, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
rango -> expresion :: expresion
tipoEscalar -> SIGNO tipoBasico longitud RANGO rango
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 72, palabra reservada: tipo 
linea 72, identificador: reales_10000 
linea 72, palabra reservada: es 
linea 72, palabra reservada: real
tipoBasico -> REAL 
linea 72, palabra reservada: largo
longitud -> LARGO 
linea 72, palabra reservada: rango 
linea 72, ctc entera: 0
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 72, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 72, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 72, operador: ^
expresionPosfija -> expresionUnaria
linea 72, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 72, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
rango -> expresion :: expresion
tipoEscalar -> tipoBasico longitud RANGO rango
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 74, identificador: valores 
linea 74, delimitador: : 
linea 74, palabra reservada: lista 
linea 74, palabra reservada: de 
linea 74, identificador: entero_corto_sin_signo
nombre -> IDENTIFICADOR 
linea 74, operador: :=
especificacionTipo -> nombre
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 74, operador: [ 
linea 74, ctc entera: 88
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 74, ctc entera: 56
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion 
linea 74, ctc entera: 100
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion 
linea 74, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion 
linea 74, ctc entera: 25
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 74, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 74, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 75, identificador: valores2 
linea 75, delimitador: : 
linea 75, palabra reservada: lista 
linea 75, palabra reservada: de 
linea 75, palabra reservada: lista 
linea 75, palabra reservada: de 
linea 75, palabra reservada: entero
tipoBasico -> ENTERO 
linea 75, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 75, operador: [
linea 75, operador: [
linea 75, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 75, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
linea 75, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 75, operador: [
linea 75, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 75, ctc entera: 5
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 77, palabra reservada: tipo 
linea 77, identificador: nombre_etiqueta 
linea 77, palabra reservada: es 
linea 77, palabra reservada: registro   
linea 78, identificador: campo1 
linea 78, delimitador: : 
linea 78, palabra reservada: entero
tipoBasico -> ENTERO
linea 78, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'   
linea 79, identificador: campo2 
linea 79, delimitador: : 
linea 79, palabra reservada: real
tipoBasico -> REAL
linea 79, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campo campo   
linea 80, identificador: la_persona 
linea 80, delimitador: : 
linea 80, identificador: persona
nombre -> IDENTIFICADOR
linea 80, delimitador: ;
especificacionTipo -> nombre
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campoMultiple campo  
linea 81, palabra reservada: fin 
linea 81, palabra reservada: registro
tipoRegistro -> REGISTRO campoMultiple FIN REGISTRO
tipoEstructurado -> tipoRegistro
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 83, identificador: pepito 
linea 83, delimitador: : 
linea 83, identificador: persona
nombre -> IDENTIFICADOR 
linea 83, operador: :=
especificacionTipo -> nombre 
linea 83, operador: { 
linea 83, identificador: nombre 
linea 83, delimitador: => 
linea 83, cadena: "Pepe Perez" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 83, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion 
linea 83, identificador: edad 
linea 83, delimitador: => 
linea 83, ctc entera: 33
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 83, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion
campoValorMult -> campo_valor , campo_valor 
linea 83, identificador: casada 
linea 83, delimitador: => 
linea 83, palabra reservada: Verdadero
literal -> VERDADERO
primario -> literal
expresionUnaria -> primario 
linea 83, operador: }
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion
campoValorMult -> campoValorMult , campo_valor
enumeraciones -> [ campoValorMultiple ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 83, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 85, identificador: coches 
linea 85, delimitador: : 
linea 85, palabra reservada: diccionario 
linea 85, palabra reservada: de 
linea 85, identificador: color
nombre -> IDENTIFICADOR 
linea 85, operador: :=
especificacionTipo -> nombre
tipoDiccionario -> DICCIONARIO DE especificacionTipo
tipoNoEstructurado -> tipoDiccionario
especificacionTipo -> tipoNoEstructurado 
linea 85, operador: { 
linea 85, cadena: "golf"  
linea 85, delimitador: => 
linea 85, identificador: Rojo
nombre -> IDENTIFICADOR
linea 85, delimitador: ,
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion 
linea 85, cadena: "xantia"  
linea 85, delimitador: => 
linea 85, identificador: Verde
nombre -> IDENTIFICADOR
linea 85, delimitador: ,
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion
claveValorMult -> claveValor , claveValor 
linea 85, cadena: "corsa"  
linea 85, delimitador: => 
linea 85, identificador: Azul
nombre -> IDENTIFICADOR 
linea 85, operador: }
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion
claveValorMult -> claveValorMult , claveValor
enumeraciones -> [ claveValorMultiple ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 85, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 87, identificador: nuevos_valores 
linea 87, delimitador: : 
linea 87, palabra reservada: lista 
linea 87, palabra reservada: de 
linea 87, palabra reservada: entero
tipoBasico -> ENTERO 
linea 87, palabra reservada: corto
longitud -> CORTO 
linea 87, operador: :=
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 87, operador: [ 
linea 87, palabra reservada: si 
linea 87, identificador: elemento
nombre -> IDENTIFICADOR 
linea 87, operador: <
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 87, ctc entera: 80
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 87, palabra reservada: entonces
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion < expresion 
linea 87, identificador: elemento
nombre -> IDENTIFICADOR
linea 87, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
linea 87, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 87, palabra reservada: para
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresionCondicional -> si expresion entonces expresion 
linea 87, identificador: elemento 
linea 87, delimitador: :
***************** syntax error
 
linea 87, palabra reservada: entero 
linea 87, palabra reservada: en 
linea 87, identificador: valores
nombre -> IDENTIFICADOR 
linea 87, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
reductora -> error expresion
reductora -> error expresion
reductora -> error expresion
linea 87, delimitador: ;
reductora -> error expresion
linea 89, palabra reservada: subprograma
reductora -> error expresion 
linea 89, identificador: escribir_lista
reductora -> error expresion 
linea 89, delimitador: (
reductora -> error expresion
linea 89, identificador: valores
reductora -> error expresion 
linea 89, delimitador: :
reductora -> error expresion 
linea 89, palabra reservada: lista
reductora -> error expresion 
linea 89, palabra reservada: de
reductora -> error expresion 
linea 89, palabra reservada: entero
reductora -> error expresion
linea 89, delimitador: )
reductora -> error expresion  
linea 90, identificador: indice
reductora -> error expresion 
linea 90, delimitador: :
reductora -> error expresion 
linea 90, palabra reservada: entero
reductora -> error expresion 
linea 90, operador: :=
reductora -> error expresion 
linea 90, ctc entera: 0
reductora -> error expresion
linea 90, delimitador: ;
reductora -> error expresion
linea 91, palabra reservada: principio
reductora -> error expresion  
linea 92, palabra reservada: prueba
reductora -> error expresion    
linea 93, palabra reservada: mientras
reductora -> error expresion 
linea 93, identificador: indice
reductora -> error expresion 
linea 93, operador: <
reductora -> error expresion 
linea 93, identificador: longitud
reductora -> error expresion
linea 93, delimitador: (
reductora -> error expresion
linea 93, identificador: valores
reductora -> error expresion
linea 93, delimitador: )
reductora -> error expresion      
linea 94, identificador: E_S
reductora -> error expresion
linea 94, operador: ::
reductora -> error expresion
linea 94, identificador: escribir_consola
reductora -> error expresion
linea 94, delimitador: (
reductora -> error expresion
linea 94, identificador: valores
reductora -> error expresion
linea 94, operador: [
reductora -> error expresion
linea 94, identificador: indice
reductora -> error expresion
linea 94, operador: ]
reductora -> error expresion
linea 94, delimitador: )
reductora -> error expresion
linea 94, delimitador: ;
reductora -> error expresion      
linea 95, identificador: indice
reductora -> error expresion 
linea 95, operador: :+
reductora -> error expresion 
linea 95, ctc entera: 1
reductora -> error expresion
linea 95, delimitador: ;
reductora -> error expresion      
linea 96, palabra reservada: fin 
linea 96, palabra reservada: bucle
reductora -> error expresion
reductora -> error expresion    
linea 97, palabra reservada: excepcion
reductora -> error expresion 
linea 97, delimitador: (
reductora -> error expresion
linea 97, identificador: longitud_excedida
reductora -> error expresion
linea 97, delimitador: )
reductora -> error expresion      
linea 98, identificador: E_S
reductora -> error expresion
linea 98, operador: ::
reductora -> error expresion
linea 98, identificador: escribir_consola
reductora -> error expresion
linea 98, delimitador: (
reductora -> error expresion
linea 98, cadena: "Lista vacia %n" 
reductora -> error expresion
linea 98, delimitador: )
reductora -> error expresion
linea 98, delimitador: ;
reductora -> error expresion    
linea 99, palabra reservada: excepcion
reductora -> error expresion      
linea 100, identificador: E_S
reductora -> error expresion
linea 100, operador: ::
reductora -> error expresion
linea 100, identificador: escribir_consola
reductora -> error expresion
linea 100, delimitador: (
reductora -> error expresion
linea 100, cadena: "Excepcion indefinida %n" 
reductora -> error expresion
linea 100, delimitador: )
reductora -> error expresion
linea 100, delimitador: ;
reductora -> error expresion  
linea 101, palabra reservada: fin 
linea 101, palabra reservada: prueba
reductora -> error expresion
reductora -> error expresion
linea 102, palabra reservada: fin 
linea 102, palabra reservada: subprograma
finSubprogramaError -> reductora FIN SUBPROGRAMA
declaracionSubprograma -> finSubprogramaError
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion    
codigoLibreria -> libreria declaracionMultiple
definicionLibreria -> LIBRERIA IDENTIFICADOR ; codigoLibreria
EXITO programa -> definicionLibreria
linea 1, palabra reservada: libreria 
linea 1, identificador: misc
linea 1, delimitador: ;
linea 3, palabra reservada: importar 
linea 3, palabra reservada: libreria 
linea 3, identificador: principal
nombre -> IDENTIFICADOR
linea 3, operador: ::
linea 3, identificador: sistema_operativo
nombre -> nombre :: IDENTIFICADOR
linea 3, operador: ::
linea 3, identificador: entrada_salida
nombre -> nombre :: IDENTIFICADOR 
linea 3, palabra reservada: como 
linea 3, identificador: E_S
linea 3, delimitador: ;
libreria -> IMPORTAR LIBRERIA nombre COMO IDENTIFICADOR
linea 5, identificador: variable 
linea 5, delimitador: : 
linea 5, palabra reservada: entero
tipoBasico -> ENTERO 
linea 5, palabra reservada: corto
longitud -> CORTO
linea 5, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
declaracion -> declaracionObjeto
linea 7, identificador: PI 
linea 7, delimitador: : 
linea 7, palabra reservada: constante 
linea 7, palabra reservada: real
tipoBasico -> REAL 
linea 7, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 7, ctc real: 3.141592
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 7, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : CONSTANTE especificacionTipo ASIGNACION expresion ;

declaracion -> declaracionObjeto
declaracionMultiple -> declaracion declaracion  
linea 9, palabra reservada: subprograma 
linea 9, identificador: areaRectangulo 
linea 9, delimitador: (
linea 9, identificador: Base
linea 9, delimitador: :
linea 9, palabra reservada: real
tipoBasico -> REAL 
linea 9, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 9, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 9, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion 
linea 9, identificador: altura
linea 9, delimitador: :
linea 9, palabra reservada: Real
tipoBasico -> REAL 
linea 9, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 9, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 9, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion
declaracionParametrosMultiple -> declaracionParametros ';' declaracionParametros  
parametrizacion -> '(' declaracionParametrosMultiple ')' 
linea 9, palabra reservada: devolver 
linea 9, palabra reservada: real
tipoBasico -> REAL  
linea 10, palabra reservada: principio
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR parametrizacion tipoResultado    
linea 11, palabra reservada: devolver 
linea 11, identificador: Base
nombre -> IDENTIFICADOR
linea 11, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 11, identificador: altura
nombre -> IDENTIFICADOR
linea 11, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver  
linea 12, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 12, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 14, palabra reservada: subprograma 
linea 14, identificador: altaUsuario 
linea 14, delimitador: ( 
linea 14, identificador: nombre
linea 14, delimitador: ,
linea 14, identificador: direccion
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 14, delimitador: :
linea 14, palabra reservada: lista 
linea 14, palabra reservada: de 
linea 14, palabra reservada: caracter
tipoBasico -> CARACTER
linea 14, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> identificadorMultiple ':' especificacionTipo 
linea 14, identificador: edad
linea 14, delimitador: :
linea 14, palabra reservada: entero
tipoBasico -> ENTERO
linea 14, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo
declaracionParametrosMultiple -> declaracionParametros ';' declaracionParametros   
linea 14, identificador: peso
linea 14, delimitador: ,
linea 14, identificador: altura
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 14, delimitador: :
linea 14, palabra reservada: real
tipoBasico -> REAL
linea 14, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> identificadorMultiple ':' especificacionTipo
declaracionParametrosMultiple -> declaracionParametrosMultiple declaracionParametros  
parametrizacion -> '(' declaracionParametrosMultiple ')'  
linea 15, palabra reservada: principio
cabeceraSubprograma -> IDENTIFICADOR parametrizacion    
linea 16, delimitador: ;
instruccion -> ';'      
linea 18, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 18, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 20, palabra reservada: tipo 
linea 20, identificador: persona 
linea 20, palabra reservada: es 
linea 20, palabra reservada: registro  
linea 21, identificador: nombre 
linea 21, delimitador: : 
linea 21, palabra reservada: lista 
linea 21, palabra reservada: de 
linea 21, palabra reservada: caracter
tipoBasico -> CARACTER
linea 21, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'  
linea 22, identificador: edad 
linea 22, delimitador: : 
linea 22, palabra reservada: entero
tipoBasico -> ENTERO
linea 22, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campo campo  
linea 23, identificador: casada 
linea 23, delimitador: : 
linea 23, palabra reservada: booleano
tipoBasico -> BOOLEANO 
linea 23, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 23, palabra reservada: Falso
literal -> FASLO
primario -> literal
expresionUnaria -> primario
linea 23, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion ';'
campoMultiple -> campoMultiple campo
linea 24, palabra reservada: fin 
linea 24, palabra reservada: registro
tipoRegistro -> REGISTRO campoMultiple FIN REGISTRO
tipoEstructurado -> tipoRegistro
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 26, palabra reservada: tipo 
linea 26, identificador: esfera 
linea 26, palabra reservada: es 
linea 26, palabra reservada: clase 
linea 26, delimitador: (
linea 26, identificador: forma
nombre -> IDENTIFICADOR
linea 26, delimitador: )
superClase -> ( nombre )  
linea 27, palabra reservada: privado
visibilidad -> PRIVADO 
linea 27, identificador: radio 
linea 27, delimitador: : 
linea 27, palabra reservada: real
tipoBasico -> REAL 
linea 27, palabra reservada: largo
longitud -> LARGO
linea 27, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
componente -> declaracionObjeto
declaracionComponente -> visibilidad  componente  
linea 28, palabra reservada: constructor
modificador -> CONSTRUCTOR 
linea 28, palabra reservada: subprograma 
linea 28, identificador: esfera 
linea 28, delimitador: (
linea 28, identificador: radio 
linea 28, delimitador: : 
linea 28, palabra reservada: real
tipoBasico -> REAL
linea 28, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo
parametrizacion -> '(' declaracionParametros ')' 
linea 28, palabra reservada: devolver 
linea 28, identificador: esfera
nombre -> IDENTIFICADOR    
linea 29, palabra reservada: principio
especificacionTipo -> nombre
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR parametrizacion tipoResultado      
linea 30, identificador: esfera
linea 30, operador: ::
nombre -> IDENTIFICADOR
linea 30, identificador: radio
nombre -> nombre :: IDENTIFICADOR 
linea 30, operador: :=
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 30, identificador: radio
nombre -> IDENTIFICADOR
linea 30, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion    
linea 31, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 31, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
componente -> modificador declaracionSubprograma
declaracionComponente ->   componente
declaracionComponenteMultiple -> declaracionComponente  declaracionComponente  
linea 32, palabra reservada: publico
visibilidad -> PUBLICO 
linea 32, palabra reservada: subprograma 
linea 32, identificador: volumen 
linea 32, palabra reservada: devolver 
linea 32, palabra reservada: real
tipoBasico -> REAL    
linea 33, palabra reservada: principio
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR tipoResultado      
linea 34, palabra reservada: devolver 
linea 34, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, operador: /
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 34, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, operador: *
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion / expresion
linea 34, identificador: PI
nombre -> IDENTIFICADOR
linea 34, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion * expresion
linea 34, identificador: esfera
nombre -> IDENTIFICADOR
linea 34, operador: ::
linea 34, identificador: radio
nombre -> nombre :: IDENTIFICADOR
linea 34, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
linea 34, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver    
linea 35, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 35, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
componente -> declaracionSubprograma
declaracionComponente -> visibilidad  componente
declaracionComponenteMultiple -> declaracionComponenteMultiple  declaracionComponente  
linea 36, palabra reservada: fin 
linea 36, palabra reservada: clase
clase -> CLASE superclase declaracionComponenteMultiple FIN CLASE
tipoEstructurado -> clase
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 38, palabra reservada: tipo 
linea 38, identificador: color 
linea 38, palabra reservada: es 
linea 38, palabra reservada: enumeracion 
linea 38, palabra reservada: de 
linea 38, palabra reservada: entero
tipoBasico -> ENTERO  
linea 39, identificador: Rojo
tipoEscalar -> tipoBasico 
linea 39, operador: := 
linea 39, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 39, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion  
linea 40, identificador: Verde 
linea 40, operador: := 
linea 40, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 40, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion
elementoEnumeracionMultiple -> elementoEnumeracion ',' elementoEnumeracion  
linea 41, identificador: Azul 
linea 41, operador: := 
linea 41, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 42, palabra reservada: fin
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion
elementoEnumeracionMultiple -> elementoEnumeracionMultiple ',' elementoEnumeracion 
linea 42, palabra reservada: enumeracion
tipoEnumerado -> ENUMERACION DE tipoEscalar elementoEnumeracionMultiple FIN ENUMERACION
tipoEstructurado -> tipoEnumerado
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 44, palabra reservada: subprograma 
linea 44, identificador: Radio_Circunferencia 
linea 44, palabra reservada: devolver 
linea 44, palabra reservada: real
tipoBasico -> REAL    
linea 47, identificador: PI
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR tipoResultado
linea 47, delimitador: : 
linea 47, palabra reservada: constante 
linea 47, palabra reservada: real
tipoBasico -> REAL 
linea 47, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 47, ctc real: .3141592^1
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 47, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : CONSTANTE especificacionTipo ASIGNACION expresion ;

declaracion -> declaracionObjeto    
linea 50, identificador: area
linea 50, delimitador: , 
linea 50, identificador: radio
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 50, delimitador: : 
linea 50, palabra reservada: real
tipoBasico -> REAL
linea 50, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> identificadorMultiple : especificacionTipo ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracion declaracion  
linea 51, identificador: otra_cosa 
linea 51, delimitador: : 
linea 51, palabra reservada: real
tipoBasico -> REAL 
linea 51, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 51, ctc real: %x1F.34^-Faa
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 51, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion   
linea 53, palabra reservada: principio  
linea 55, identificador: E_S
linea 55, operador: ::
nombre -> IDENTIFICADOR
linea 55, identificador: escribir_consola
nombre -> nombre :: IDENTIFICADOR
linea 55, delimitador: (
linea 55, cadena: " %nRadio de la #{circunferencia#}%
	                        %o151%O144%X69%O157%x74%O141: " 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 56, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 56, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada  
linea 57, identificador: E_S
linea 57, operador: ::
nombre -> IDENTIFICADOR
linea 57, identificador: leer_consola
nombre -> nombre :: IDENTIFICADOR
linea 57, delimitador: (
linea 57, identificador: radio
linea 57, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 57, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccion instruccion     
linea 60, identificador: area 
linea 60, operador: :=
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 60, identificador: PI
nombre -> IDENTIFICADOR 
linea 60, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 60, identificador: radio
nombre -> IDENTIFICADOR 
linea 60, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria 
linea 60, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 60, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion
instruccionMultiple -> instruccionMultiple instruccion    
linea 64, identificador: escribir_consola
linea 64, delimitador: (
nombre -> IDENTIFICADOR
linea 64, cadena: " %nArea de la %
	                     %"circunferencia %": #f" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 65, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion 
linea 65, identificador: area
linea 65, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametro ',' definicionParametro
llamadaSubprograma -> nombre '(' definicionParametroMultiple ')'
linea 65, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccionMultiple instruccion 
linea 65, identificador: escribir_consola
linea 65, delimitador: (
nombre -> IDENTIFICADOR
linea 65, cadena: " %n" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 65, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 65, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccionMultiple instruccion  
linea 67, palabra reservada: DeVoLVeR 
linea 67, identificador: area
nombre -> IDENTIFICADOR
linea 67, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver
instruccionMultiple -> instruccionMultiple instruccion
linea 68, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO declaracionMultiple instruccionMultiple FIN 
linea 68, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 70, palabra reservada: tipo 
linea 70, identificador: entero_corto_sin_signo 
linea 70, palabra reservada: es 
linea 70, palabra reservada: entero
tipoBasico -> ENTERO 
linea 70, palabra reservada: corto
longitud -> CORTO
linea 70, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 71, palabra reservada: tipo 
linea 71, identificador: enteros_8bits 
linea 71, palabra reservada: es 
linea 71, palabra reservada: signo 
linea 71, palabra reservada: entero
tipoBasico -> ENTERO 
linea 71, palabra reservada: corto
longitud -> CORTO 
linea 71, palabra reservada: rango 
linea 71, operador: -
linea 71, ctc entera: 255
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> '-' primario 
linea 71, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 71, ctc entera: 255
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 71, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
rango -> expresion :: expresion
tipoEscalar -> SIGNO tipoBasico longitud RANGO rango
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 72, palabra reservada: tipo 
linea 72, identificador: reales_10000 
linea 72, palabra reservada: es 
linea 72, palabra reservada: real
tipoBasico -> REAL 
linea 72, palabra reservada: largo
longitud -> LARGO 
linea 72, palabra reservada: rango 
linea 72, ctc entera: 0
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 72, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 72, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 72, operador: ^
expresionPosfija -> expresionUnaria
linea 72, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 72, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
rango -> expresion :: expresion
tipoEscalar -> tipoBasico longitud RANGO rango
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 74, identificador: valores 
linea 74, delimitador: : 
linea 74, palabra reservada: lista 
linea 74, palabra reservada: de 
linea 74, identificador: entero_corto_sin_signo
nombre -> IDENTIFICADOR 
linea 74, operador: :=
especificacionTipo -> nombre
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 74, operador: [ 
linea 74, ctc entera: 88
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 74, ctc entera: 56
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion 
linea 74, ctc entera: 100
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion 
linea 74, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion 
linea 74, ctc entera: 25
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 74, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 74, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 75, identificador: valores2 
linea 75, delimitador: : 
linea 75, palabra reservada: lista 
linea 75, palabra reservada: de 
linea 75, palabra reservada: lista 
linea 75, palabra reservada: de 
linea 75, palabra reservada: entero
tipoBasico -> ENTERO 
linea 75, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 75, operador: [
linea 75, operador: [
linea 75, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 75, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
linea 75, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 75, operador: [
linea 75, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 75, ctc entera: 5
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 77, palabra reservada: tipo 
linea 77, identificador: nombre_etiqueta 
linea 77, palabra reservada: es 
linea 77, palabra reservada: registro   
linea 78, identificador: campo1 
linea 78, delimitador: : 
linea 78, palabra reservada: entero
tipoBasico -> ENTERO
linea 78, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'   
linea 79, identificador: campo2 
linea 79, delimitador: : 
linea 79, palabra reservada: real
tipoBasico -> REAL
linea 79, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campo campo   
linea 80, identificador: la_persona 
linea 80, delimitador: : 
linea 80, identificador: persona
nombre -> IDENTIFICADOR
linea 80, delimitador: ;
especificacionTipo -> nombre
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campoMultiple campo  
linea 81, palabra reservada: fin 
linea 81, palabra reservada: registro
tipoRegistro -> REGISTRO campoMultiple FIN REGISTRO
tipoEstructurado -> tipoRegistro
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 83, identificador: pepito 
linea 83, delimitador: : 
linea 83, identificador: persona
nombre -> IDENTIFICADOR 
linea 83, operador: :=
especificacionTipo -> nombre 
linea 83, operador: { 
linea 83, identificador: nombre 
linea 83, delimitador: => 
linea 83, cadena: "Pepe Perez" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 83, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion 
linea 83, identificador: edad 
linea 83, delimitador: => 
linea 83, ctc entera: 33
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 83, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion
campoValorMult -> campo_valor , campo_valor 
linea 83, identificador: casada 
linea 83, delimitador: => 
linea 83, palabra reservada: Verdadero
literal -> VERDADERO
primario -> literal
expresionUnaria -> primario 
linea 83, operador: }
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion
campoValorMult -> campoValorMult , campo_valor
enumeraciones -> [ campoValorMultiple ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 83, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 85, identificador: coches 
linea 85, delimitador: : 
linea 85, palabra reservada: diccionario 
linea 85, palabra reservada: de 
linea 85, identificador: color
nombre -> IDENTIFICADOR 
linea 85, operador: :=
especificacionTipo -> nombre
tipoDiccionario -> DICCIONARIO DE especificacionTipo
tipoNoEstructurado -> tipoDiccionario
especificacionTipo -> tipoNoEstructurado 
linea 85, operador: { 
linea 85, cadena: "golf"  
linea 85, delimitador: => 
linea 85, identificador: Rojo
nombre -> IDENTIFICADOR
linea 85, delimitador: ,
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion 
linea 85, cadena: "xantia"  
linea 85, delimitador: => 
linea 85, identificador: Verde
nombre -> IDENTIFICADOR
linea 85, delimitador: ,
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion
claveValorMult -> claveValor , claveValor 
linea 85, cadena: "corsa"  
linea 85, delimitador: => 
linea 85, identificador: Azul
nombre -> IDENTIFICADOR 
linea 85, operador: }
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion
claveValorMult -> claveValorMult , claveValor
enumeraciones -> [ claveValorMultiple ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 85, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 87, identificador: nuevos_valores 
linea 87, delimitador: : 
linea 87, palabra reservada: lista 
linea 87, palabra reservada: de 
linea 87, palabra reservada: entero
tipoBasico -> ENTERO 
linea 87, palabra reservada: corto
longitud -> CORTO 
linea 87, operador: :=
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 87, operador: [ 
linea 87, palabra reservada: si 
linea 87, identificador: elemento
nombre -> IDENTIFICADOR 
linea 87, operador: <
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 87, ctc entera: 80
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 87, palabra reservada: entonces
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion < expresion 
linea 87, identificador: elemento
nombre -> IDENTIFICADOR
linea 87, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
linea 87, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 87, palabra reservada: para
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresionCondicional -> si expresion entonces expresion 
linea 87, identificador: elemento 
linea 87, delimitador: :
***************** syntax error
 
linea 87, palabra reservada: entero 
linea 87, palabra reservada: en 
linea 87, identificador: valores
nombre -> IDENTIFICADOR 
linea 87, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
reductora -> error expresion
reductora -> error expresion
reductora -> error expresion
linea 87, delimitador: ;
reductora -> error expresion
linea 89, palabra reservada: subprograma
reductora -> error expresion 
linea 89, identificador: escribir_lista
reductora -> error expresion 
linea 89, delimitador: (
reductora -> error expresion
linea 89, identificador: valores
reductora -> error expresion 
linea 89, delimitador: :
reductora -> error expresion 
linea 89, palabra reservada: lista
reductora -> error expresion 
linea 89, palabra reservada: de
reductora -> error expresion 
linea 89, palabra reservada: entero
reductora -> error expresion
linea 89, delimitador: )
reductora -> error expresion  
linea 90, identificador: indice
reductora -> error expresion 
linea 90, delimitador: :
reductora -> error expresion 
linea 90, palabra reservada: entero
reductora -> error expresion 
linea 90, operador: :=
reductora -> error expresion 
linea 90, ctc entera: 0
reductora -> error expresion
linea 90, delimitador: ;
reductora -> error expresion
linea 91, palabra reservada: principio
reductora -> error expresion  
linea 92, palabra reservada: prueba
reductora -> error expresion    
linea 93, palabra reservada: mientras
reductora -> error expresion 
linea 93, identificador: indice
reductora -> error expresion 
linea 93, operador: <
reductora -> error expresion 
linea 93, identificador: longitud
reductora -> error expresion
linea 93, delimitador: (
reductora -> error expresion
linea 93, identificador: valores
reductora -> error expresion
linea 93, delimitador: )
reductora -> error expresion      
linea 94, identificador: E_S
reductora -> error expresion
linea 94, operador: ::
reductora -> error expresion
linea 94, identificador: escribir_consola
reductora -> error expresion
linea 94, delimitador: (
reductora -> error expresion
linea 94, identificador: valores
reductora -> error expresion
linea 94, operador: [
reductora -> error expresion
linea 94, identificador: indice
reductora -> error expresion
linea 94, operador: ]
reductora -> error expresion
linea 94, delimitador: )
reductora -> error expresion
linea 94, delimitador: ;
reductora -> error expresion      
linea 95, identificador: indice
reductora -> error expresion 
linea 95, operador: :+
reductora -> error expresion 
linea 95, ctc entera: 1
reductora -> error expresion
linea 95, delimitador: ;
reductora -> error expresion      
linea 96, palabra reservada: fin 
linea 96, palabra reservada: bucle
reductora -> error expresion
reductora -> error expresion    
linea 97, palabra reservada: excepcion
reductora -> error expresion 
linea 97, delimitador: (
reductora -> error expresion
linea 97, identificador: longitud_excedida
reductora -> error expresion
linea 97, delimitador: )
reductora -> error expresion      
linea 98, identificador: E_S
reductora -> error expresion
linea 98, operador: ::
reductora -> error expresion
linea 98, identificador: escribir_consola
reductora -> error expresion
linea 98, delimitador: (
reductora -> error expresion
linea 98, cadena: "Lista vacia %n" 
reductora -> error expresion
linea 98, delimitador: )
reductora -> error expresion
linea 98, delimitador: ;
reductora -> error expresion    
linea 99, palabra reservada: excepcion
reductora -> error expresion      
linea 100, identificador: E_S
reductora -> error expresion
linea 100, operador: ::
reductora -> error expresion
linea 100, identificador: escribir_consola
reductora -> error expresion
linea 100, delimitador: (
reductora -> error expresion
linea 100, cadena: "Excepcion indefinida %n" 
reductora -> error expresion
linea 100, delimitador: )
reductora -> error expresion
linea 100, delimitador: ;
reductora -> error expresion  
linea 101, palabra reservada: fin 
linea 101, palabra reservada: prueba
reductora -> error expresion
reductora -> error expresion
linea 102, palabra reservada: fin 
linea 102, palabra reservada: subprograma
finSubprogramaError -> reductora FIN SUBPROGRAMA
declaracionSubprograma -> finSubprogramaError
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion    
codigoLibreria -> libreria declaracionMultiple
definicionLibreria -> LIBRERIA IDENTIFICADOR ; codigoLibreria
EXITO programa -> definicionLibreria
linea 1, palabra reservada: libreria 
linea 1, identificador: misc
linea 1, delimitador: ;
linea 3, palabra reservada: importar 
linea 3, palabra reservada: libreria 
linea 3, identificador: principal
nombre -> IDENTIFICADOR
linea 3, operador: ::
linea 3, identificador: sistema_operativo
nombre -> nombre :: IDENTIFICADOR
linea 3, operador: ::
linea 3, identificador: entrada_salida
nombre -> nombre :: IDENTIFICADOR 
linea 3, palabra reservada: como 
linea 3, identificador: E_S
linea 3, delimitador: ;
libreria -> IMPORTAR LIBRERIA nombre COMO IDENTIFICADOR
linea 5, identificador: variable 
linea 5, delimitador: : 
linea 5, palabra reservada: entero
tipoBasico -> ENTERO 
linea 5, palabra reservada: corto
longitud -> CORTO
linea 5, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
declaracion -> declaracionObjeto
linea 7, identificador: PI 
linea 7, delimitador: : 
linea 7, palabra reservada: constante 
linea 7, palabra reservada: real
tipoBasico -> REAL 
linea 7, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 7, ctc real: 3.141592
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 7, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : CONSTANTE especificacionTipo ASIGNACION expresion ;

declaracion -> declaracionObjeto
declaracionMultiple -> declaracion declaracion  
linea 9, palabra reservada: subprograma 
linea 9, identificador: areaRectangulo 
linea 9, delimitador: (
linea 9, identificador: Base
linea 9, delimitador: :
linea 9, palabra reservada: real
tipoBasico -> REAL 
linea 9, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 9, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 9, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion 
linea 9, identificador: altura
linea 9, delimitador: :
linea 9, palabra reservada: Real
tipoBasico -> REAL 
linea 9, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 9, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 9, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion
declaracionParametrosMultiple -> declaracionParametros ';' declaracionParametros  
parametrizacion -> '(' declaracionParametrosMultiple ')' 
linea 9, palabra reservada: devolver 
linea 9, palabra reservada: real
tipoBasico -> REAL  
linea 10, palabra reservada: principio
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR parametrizacion tipoResultado    
linea 11, palabra reservada: devolver 
linea 11, identificador: Base
nombre -> IDENTIFICADOR
linea 11, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 11, identificador: altura
nombre -> IDENTIFICADOR
linea 11, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver  
linea 12, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 12, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 14, palabra reservada: subprograma 
linea 14, identificador: altaUsuario 
linea 14, delimitador: ( 
linea 14, identificador: nombre
linea 14, delimitador: ,
linea 14, identificador: direccion
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 14, delimitador: :
linea 14, palabra reservada: lista 
linea 14, palabra reservada: de 
linea 14, palabra reservada: caracter
tipoBasico -> CARACTER
linea 14, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> identificadorMultiple ':' especificacionTipo 
linea 14, identificador: edad
linea 14, delimitador: :
linea 14, palabra reservada: entero
tipoBasico -> ENTERO
linea 14, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo
declaracionParametrosMultiple -> declaracionParametros ';' declaracionParametros   
linea 14, identificador: peso
linea 14, delimitador: ,
linea 14, identificador: altura
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 14, delimitador: :
linea 14, palabra reservada: real
tipoBasico -> REAL
linea 14, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> identificadorMultiple ':' especificacionTipo
declaracionParametrosMultiple -> declaracionParametrosMultiple declaracionParametros  
parametrizacion -> '(' declaracionParametrosMultiple ')'  
linea 15, palabra reservada: principio
cabeceraSubprograma -> IDENTIFICADOR parametrizacion    
linea 16, delimitador: ;
instruccion -> ';'      
linea 18, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 18, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 20, palabra reservada: tipo 
linea 20, identificador: persona 
linea 20, palabra reservada: es 
linea 20, palabra reservada: registro  
linea 21, identificador: nombre 
linea 21, delimitador: : 
linea 21, palabra reservada: lista 
linea 21, palabra reservada: de 
linea 21, palabra reservada: caracter
tipoBasico -> CARACTER
linea 21, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'  
linea 22, identificador: edad 
linea 22, delimitador: : 
linea 22, palabra reservada: entero
tipoBasico -> ENTERO
linea 22, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campo campo  
linea 23, identificador: casada 
linea 23, delimitador: : 
linea 23, palabra reservada: booleano
tipoBasico -> BOOLEANO 
linea 23, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 23, palabra reservada: Falso
literal -> FASLO
primario -> literal
expresionUnaria -> primario
linea 23, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo -> IDENTIFICADOR ':' especificacionTipo ASIGNACION expresion ';'
campoMultiple -> campoMultiple campo
linea 24, palabra reservada: fin 
linea 24, palabra reservada: registro
tipoRegistro -> REGISTRO campoMultiple FIN REGISTRO
tipoEstructurado -> tipoRegistro
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 26, palabra reservada: tipo 
linea 26, identificador: esfera 
linea 26, palabra reservada: es 
linea 26, palabra reservada: clase 
linea 26, delimitador: (
linea 26, identificador: forma
nombre -> IDENTIFICADOR
linea 26, delimitador: )
superClase -> ( nombre )  
linea 27, palabra reservada: privado
visibilidad -> PRIVADO 
linea 27, identificador: radio 
linea 27, delimitador: : 
linea 27, palabra reservada: real
tipoBasico -> REAL 
linea 27, palabra reservada: largo
longitud -> LARGO
linea 27, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ;
componente -> declaracionObjeto
declaracionComponente -> visibilidad  componente  
linea 28, palabra reservada: constructor
modificador -> CONSTRUCTOR 
linea 28, palabra reservada: subprograma 
linea 28, identificador: esfera 
linea 28, delimitador: (
linea 28, identificador: radio 
linea 28, delimitador: : 
linea 28, palabra reservada: real
tipoBasico -> REAL
linea 28, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo
parametrizacion -> '(' declaracionParametros ')' 
linea 28, palabra reservada: devolver 
linea 28, identificador: esfera
nombre -> IDENTIFICADOR    
linea 29, palabra reservada: principio
especificacionTipo -> nombre
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR parametrizacion tipoResultado      
linea 30, identificador: esfera
linea 30, operador: ::
nombre -> IDENTIFICADOR
linea 30, identificador: radio
nombre -> nombre :: IDENTIFICADOR 
linea 30, operador: :=
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 30, identificador: radio
nombre -> IDENTIFICADOR
linea 30, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion    
linea 31, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 31, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
componente -> modificador declaracionSubprograma
declaracionComponente ->   componente
declaracionComponenteMultiple -> declaracionComponente  declaracionComponente  
linea 32, palabra reservada: publico
visibilidad -> PUBLICO 
linea 32, palabra reservada: subprograma 
linea 32, identificador: volumen 
linea 32, palabra reservada: devolver 
linea 32, palabra reservada: real
tipoBasico -> REAL    
linea 33, palabra reservada: principio
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR tipoResultado      
linea 34, palabra reservada: devolver 
linea 34, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, operador: /
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 34, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, operador: *
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion / expresion
linea 34, identificador: PI
nombre -> IDENTIFICADOR
linea 34, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion * expresion
linea 34, identificador: esfera
nombre -> IDENTIFICADOR
linea 34, operador: ::
linea 34, identificador: radio
nombre -> nombre :: IDENTIFICADOR
linea 34, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
linea 34, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 34, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver    
linea 35, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO instruccion FIN 
linea 35, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
componente -> declaracionSubprograma
declaracionComponente -> visibilidad  componente
declaracionComponenteMultiple -> declaracionComponenteMultiple  declaracionComponente  
linea 36, palabra reservada: fin 
linea 36, palabra reservada: clase
clase -> CLASE superclase declaracionComponenteMultiple FIN CLASE
tipoEstructurado -> clase
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 38, palabra reservada: tipo 
linea 38, identificador: color 
linea 38, palabra reservada: es 
linea 38, palabra reservada: enumeracion 
linea 38, palabra reservada: de 
linea 38, palabra reservada: entero
tipoBasico -> ENTERO  
linea 39, identificador: Rojo
tipoEscalar -> tipoBasico 
linea 39, operador: := 
linea 39, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 39, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion  
linea 40, identificador: Verde 
linea 40, operador: := 
linea 40, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 40, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion
elementoEnumeracionMultiple -> elementoEnumeracion ',' elementoEnumeracion  
linea 41, identificador: Azul 
linea 41, operador: := 
linea 41, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 42, palabra reservada: fin
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
elementoEnumeracion -> IDENTIFICADOR ASIGNACION expresion
elementoEnumeracionMultiple -> elementoEnumeracionMultiple ',' elementoEnumeracion 
linea 42, palabra reservada: enumeracion
tipoEnumerado -> ENUMERACION DE tipoEscalar elementoEnumeracionMultiple FIN ENUMERACION
tipoEstructurado -> tipoEnumerado
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 44, palabra reservada: subprograma 
linea 44, identificador: Radio_Circunferencia 
linea 44, palabra reservada: devolver 
linea 44, palabra reservada: real
tipoBasico -> REAL    
linea 47, identificador: PI
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoResultado -> DEVOLVER especificacionTipo
cabeceraSubprograma -> IDENTIFICADOR tipoResultado
linea 47, delimitador: : 
linea 47, palabra reservada: constante 
linea 47, palabra reservada: real
tipoBasico -> REAL 
linea 47, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 47, ctc real: .3141592^1
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 47, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : CONSTANTE especificacionTipo ASIGNACION expresion ;

declaracion -> declaracionObjeto    
linea 50, identificador: area
linea 50, delimitador: , 
linea 50, identificador: radio
identificadorMultiple -> IDENTIFICADOR ',' IDENTIFICADOR
linea 50, delimitador: : 
linea 50, palabra reservada: real
tipoBasico -> REAL
linea 50, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
declaracionObjeto -> identificadorMultiple : especificacionTipo ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracion declaracion  
linea 51, identificador: otra_cosa 
linea 51, delimitador: : 
linea 51, palabra reservada: real
tipoBasico -> REAL 
linea 51, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 51, ctc real: %x1F.34^-Faa
literal -> CTC_REAL
primario -> literal
expresionUnaria -> primario
linea 51, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion   
linea 53, palabra reservada: principio  
linea 55, identificador: E_S
linea 55, operador: ::
nombre -> IDENTIFICADOR
linea 55, identificador: escribir_consola
nombre -> nombre :: IDENTIFICADOR
linea 55, delimitador: (
linea 55, cadena: " %nRadio de la #{circunferencia#}%
	                        %o151%O144%X69%O157%x74%O141: " 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 56, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 56, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada  
linea 57, identificador: E_S
linea 57, operador: ::
nombre -> IDENTIFICADOR
linea 57, identificador: leer_consola
nombre -> nombre :: IDENTIFICADOR
linea 57, delimitador: (
linea 57, identificador: radio
linea 57, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 57, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccion instruccion     
linea 60, identificador: area 
linea 60, operador: :=
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIGNACION :=  
linea 60, identificador: PI
nombre -> IDENTIFICADOR 
linea 60, operador: *
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 60, identificador: radio
nombre -> IDENTIFICADOR 
linea 60, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria 
linea 60, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 60, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresion -> expresion * expresion
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion
instruccionMultiple -> instruccionMultiple instruccion    
linea 64, identificador: escribir_consola
linea 64, delimitador: (
nombre -> IDENTIFICADOR
linea 64, cadena: " %nArea de la %
	                     %"circunferencia %": #f" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 65, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion 
linea 65, identificador: area
linea 65, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
definicionParametroMultiple -> definicionParametro ',' definicionParametro
llamadaSubprograma -> nombre '(' definicionParametroMultiple ')'
linea 65, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccionMultiple instruccion 
linea 65, identificador: escribir_consola
linea 65, delimitador: (
nombre -> IDENTIFICADOR
linea 65, cadena: " %n" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 65, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 65, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada
instruccionMultiple -> instruccionMultiple instruccion  
linea 67, palabra reservada: DeVoLVeR 
linea 67, identificador: area
nombre -> IDENTIFICADOR
linea 67, delimitador: ;
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionDevolver -> DEVOLVER expresion ';'
instruccion -> instruccionDevolver
instruccionMultiple -> instruccionMultiple instruccion
linea 68, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO declaracionMultiple instruccionMultiple FIN 
linea 68, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion
linea 70, palabra reservada: tipo 
linea 70, identificador: entero_corto_sin_signo 
linea 70, palabra reservada: es 
linea 70, palabra reservada: entero
tipoBasico -> ENTERO 
linea 70, palabra reservada: corto
longitud -> CORTO
linea 70, delimitador: ;
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 71, palabra reservada: tipo 
linea 71, identificador: enteros_8bits 
linea 71, palabra reservada: es 
linea 71, palabra reservada: signo 
linea 71, palabra reservada: entero
tipoBasico -> ENTERO 
linea 71, palabra reservada: corto
longitud -> CORTO 
linea 71, palabra reservada: rango 
linea 71, operador: -
linea 71, ctc entera: 255
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> '-' primario 
linea 71, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 71, ctc entera: 255
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 71, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
rango -> expresion :: expresion
tipoEscalar -> SIGNO tipoBasico longitud RANGO rango
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 72, palabra reservada: tipo 
linea 72, identificador: reales_10000 
linea 72, palabra reservada: es 
linea 72, palabra reservada: real
tipoBasico -> REAL 
linea 72, palabra reservada: largo
longitud -> LARGO 
linea 72, palabra reservada: rango 
linea 72, ctc entera: 0
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 72, delimitador: ..
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 72, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 72, operador: ^
expresionPosfija -> expresionUnaria
linea 72, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 72, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
rango -> expresion :: expresion
tipoEscalar -> tipoBasico longitud RANGO rango
tipoNoEstructurado -> tipoEscalar
declaracionTipo -> TIPO IDENTIFICADOR ES tipoNoEstructurado ';'
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 74, identificador: valores 
linea 74, delimitador: : 
linea 74, palabra reservada: lista 
linea 74, palabra reservada: de 
linea 74, identificador: entero_corto_sin_signo
nombre -> IDENTIFICADOR 
linea 74, operador: :=
especificacionTipo -> nombre
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 74, operador: [ 
linea 74, ctc entera: 88
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 74, ctc entera: 56
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion 
linea 74, ctc entera: 100
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion 
linea 74, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 74, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion 
linea 74, ctc entera: 25
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 74, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 74, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 75, identificador: valores2 
linea 75, delimitador: : 
linea 75, palabra reservada: lista 
linea 75, palabra reservada: de 
linea 75, palabra reservada: lista 
linea 75, palabra reservada: de 
linea 75, palabra reservada: entero
tipoBasico -> ENTERO 
linea 75, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 75, operador: [
linea 75, operador: [
linea 75, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 75, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
linea 75, ctc entera: 3
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresionMult , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 75, operador: [
linea 75, ctc entera: 4
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
linea 75, ctc entera: 5
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, operador: ]
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresionMult -> expresion , expresion
enumeraciones -> [ expresionMult ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 75, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 77, palabra reservada: tipo 
linea 77, identificador: nombre_etiqueta 
linea 77, palabra reservada: es 
linea 77, palabra reservada: registro   
linea 78, identificador: campo1 
linea 78, delimitador: : 
linea 78, palabra reservada: entero
tipoBasico -> ENTERO
linea 78, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'   
linea 79, identificador: campo2 
linea 79, delimitador: : 
linea 79, palabra reservada: real
tipoBasico -> REAL
linea 79, delimitador: ;
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campo campo   
linea 80, identificador: la_persona 
linea 80, delimitador: : 
linea 80, identificador: persona
nombre -> IDENTIFICADOR
linea 80, delimitador: ;
especificacionTipo -> nombre
campo -> IDENTIFICADOR ':' especificacionTipo ';'
campoMultiple -> campoMultiple campo  
linea 81, palabra reservada: fin 
linea 81, palabra reservada: registro
tipoRegistro -> REGISTRO campoMultiple FIN REGISTRO
tipoEstructurado -> tipoRegistro
declaracionTipo -> TIPO IDENTIFICADOR ES tipoEstructurado
declaracion -> declaracionTipo
declaracionMultiple -> declaracionMultiple declaracion
linea 83, identificador: pepito 
linea 83, delimitador: : 
linea 83, identificador: persona
nombre -> IDENTIFICADOR 
linea 83, operador: :=
especificacionTipo -> nombre 
linea 83, operador: { 
linea 83, identificador: nombre 
linea 83, delimitador: => 
linea 83, cadena: "Pepe Perez" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 83, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion 
linea 83, identificador: edad 
linea 83, delimitador: => 
linea 83, ctc entera: 33
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 83, delimitador: ,
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion
campoValorMult -> campo_valor , campo_valor 
linea 83, identificador: casada 
linea 83, delimitador: => 
linea 83, palabra reservada: Verdadero
literal -> VERDADERO
primario -> literal
expresionUnaria -> primario 
linea 83, operador: }
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
campo_valor -> CTC_CADENA => expresion
campoValorMult -> campoValorMult , campo_valor
enumeraciones -> [ campoValorMultiple ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 83, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 85, identificador: coches 
linea 85, delimitador: : 
linea 85, palabra reservada: diccionario 
linea 85, palabra reservada: de 
linea 85, identificador: color
nombre -> IDENTIFICADOR 
linea 85, operador: :=
especificacionTipo -> nombre
tipoDiccionario -> DICCIONARIO DE especificacionTipo
tipoNoEstructurado -> tipoDiccionario
especificacionTipo -> tipoNoEstructurado 
linea 85, operador: { 
linea 85, cadena: "golf"  
linea 85, delimitador: => 
linea 85, identificador: Rojo
nombre -> IDENTIFICADOR
linea 85, delimitador: ,
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion 
linea 85, cadena: "xantia"  
linea 85, delimitador: => 
linea 85, identificador: Verde
nombre -> IDENTIFICADOR
linea 85, delimitador: ,
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion
claveValorMult -> claveValor , claveValor 
linea 85, cadena: "corsa"  
linea 85, delimitador: => 
linea 85, identificador: Azul
nombre -> IDENTIFICADOR 
linea 85, operador: }
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clave_valor -> CTC_CADENA => expresion
claveValorMult -> claveValorMult , claveValor
enumeraciones -> [ claveValorMultiple ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 85, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 87, identificador: nuevos_valores 
linea 87, delimitador: : 
linea 87, palabra reservada: lista 
linea 87, palabra reservada: de 
linea 87, palabra reservada: entero
tipoBasico -> ENTERO 
linea 87, palabra reservada: corto
longitud -> CORTO 
linea 87, operador: :=
tipoEscalar -> tipoBasico longitud
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado 
linea 87, operador: [ 
linea 87, palabra reservada: si 
linea 87, identificador: elemento
nombre -> IDENTIFICADOR 
linea 87, operador: <
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 87, ctc entera: 80
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 87, palabra reservada: entonces
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion < expresion 
linea 87, identificador: elemento
nombre -> IDENTIFICADOR
linea 87, operador: ^
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
linea 87, ctc entera: 2
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario 
linea 87, palabra reservada: para
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresionPotencia -> expresionPosfija ^ expresionPotencia
expresion -> expresionPotencia
expresionCondicional -> si expresion entonces expresion 
linea 87, identificador: elemento 
linea 87, delimitador: : 
linea 87, palabra reservada: entero
tipoBasico -> ENTERO 
linea 87, palabra reservada: en
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 87, identificador: valores
nombre -> IDENTIFICADOR 
linea 87, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
clausulaIteracion -> PARA IDENTIFICADOR EN ':' especifiacionTipo EN expresion
enumeraciones -> [ expresionCondicional ]
primario -> enumeraciones 
expresionUnaria -> primario
linea 87, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
declaracionMultiple -> declaracionMultiple declaracion
linea 89, palabra reservada: subprograma 
linea 89, identificador: escribir_lista 
linea 89, delimitador: (
linea 89, identificador: valores 
linea 89, delimitador: : 
linea 89, palabra reservada: lista 
linea 89, palabra reservada: de 
linea 89, palabra reservada: entero
tipoBasico -> ENTERO
linea 89, delimitador: )
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado
tipoTabla -> LISTA DE especificacionTipo
tipoNoEstructurado -> tipoTabla
especificacionTipo -> tipoNoEstructurado
declaracionParametros -> IDENTIFICADOR ':' especificacionTipo
parametrizacion -> '(' declaracionParametros ')'  
linea 90, identificador: indice
cabeceraSubprograma -> IDENTIFICADOR parametrizacion 
linea 90, delimitador: : 
linea 90, palabra reservada: entero
tipoBasico -> ENTERO 
linea 90, operador: :=
tipoEscalar -> tipoBasico
tipoNoEstructurado -> tipoEscalar
especificacionTipo -> tipoNoEstructurado 
linea 90, ctc entera: 0
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 90, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
declaracionObjeto -> IDENTIFICADOR : especificacionTipo ASIGNACION expresion ;
declaracion -> declaracionObjeto
linea 91, palabra reservada: principio  
linea 92, palabra reservada: prueba    
linea 93, palabra reservada: mientras 
linea 93, identificador: indice
nombre -> IDENTIFICADOR 
linea 93, operador: <
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia 
linea 93, identificador: longitud
nombre -> IDENTIFICADOR
linea 93, delimitador: (
linea 93, identificador: valores
linea 93, delimitador: )
nombre -> IDENTIFICADOR
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
primario -> llamada_subprograma
expresionUnaria -> primario      
linea 94, identificador: E_S
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
expresion -> expresion < expresion
clausulaIteracion -> MIENTRAS expresion
linea 94, operador: ::
nombre -> IDENTIFICADOR
linea 94, identificador: escribir_consola
nombre -> nombre :: IDENTIFICADOR
linea 94, delimitador: (
linea 94, identificador: valores
linea 94, operador: [
nombre -> IDENTIFICADOR
objeto -> nombre
linea 94, identificador: indice
nombre -> IDENTIFICADOR
linea 94, operador: ]
objeto -> nombre
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
objeto -> objeto [ expresion ]
linea 94, delimitador: )
primario -> objeto
expresionUnaria -> primario
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 94, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada      
linea 95, identificador: indice 
linea 95, operador: :+
nombre -> IDENTIFICADOR
objeto -> nombre
operadorAsignacion -> ASIG_SUMA :+ 
linea 95, ctc entera: 1
literal -> CTC_ENTERA
primario -> literal
expresionUnaria -> primario
linea 95, delimitador: ;
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
instruccionAsignacion -> objeto op_asignacion expresion ';'
instruccion -> instruccionAsignacion
instruccionMultiple -> instruccion instruccion      
linea 96, palabra reservada: fin 
linea 96, palabra reservada: bucle
instruccionBucle -> clausulaIteracion instruccionMultiple FIN BUCLE
instruccion -> instruccionBucle    
linea 97, palabra reservada: excepcion 
linea 97, delimitador: (
linea 97, identificador: longitud_excedida
nombre -> IDENTIFICADOR
linea 97, delimitador: )      
linea 98, identificador: E_S
linea 98, operador: ::
nombre -> IDENTIFICADOR
linea 98, identificador: escribir_consola
nombre -> nombre :: IDENTIFICADOR
linea 98, delimitador: (
linea 98, cadena: "Lista vacia %n" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 98, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 98, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada    
linea 99, palabra reservada: excepcion
clausulaExcepcionEspecifica -> EXCEPCION ( nombre ) intruccion      
linea 100, identificador: E_S
linea 100, operador: ::
nombre -> IDENTIFICADOR
linea 100, identificador: escribir_consola
nombre -> nombre :: IDENTIFICADOR
linea 100, delimitador: (
linea 100, cadena: "Excepcion indefinida %n" 
literal -> CTC_CADENA
primario -> literal
expresionUnaria -> primario
linea 100, delimitador: )
expresionPosfija -> expresionUnaria
expresionPotencia -> expresionPosfija
expresion -> expresionPotencia
definicionParametro -> expresion
llamadaSubprograma -> nombre '(' definicionParametro ')'
linea 100, delimitador: ;
instruccionLlamada -> llamadaSubprograma ';'
instruccion -> instruccionLlamada  
linea 101, palabra reservada: fin
clausulaExcepcionGeneral -> EXCEPCION instruccion
clausulasExcepcion -> clausulaExcepcionEspecifica clausulaExcepcionGeneral
clausulas -> clausulasExcepcion 
linea 101, palabra reservada: prueba
instrccuionCapturaDeExcepcion -> PRUEBA instruccion clausulas FIN PRUEBA
instruccion -> instruccionDeCapturaDeExcepcion
linea 102, palabra reservada: fin
cuerpoSubprograma -> PRINCIPIO declaracion instruccion FIN 
linea 102, palabra reservada: subprograma
declaracionSubprograma -> SUBPROGRAMA cabeceraSubprograma cuerpoSubprograma SUBPROGRAMA
declaracion -> declaracionSubprograma
declaracionMultiple -> declaracionMultiple declaracion    
codigoLibreria -> libreria declaracionMultiple
definicionLibreria -> LIBRERIA IDENTIFICADOR ; codigoLibreria
EXITO programa -> definicionLibreria